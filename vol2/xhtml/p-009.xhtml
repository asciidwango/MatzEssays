<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第34章 Blogの世界</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 2</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 2</a>　&gt;　<a href="p-008.xhtml">第34章</a>　&gt;　Ruby開発日記</p>
<!-- Body -->
<section id="chap3410" class="level2">
<a id="page_046"/>
<h3>◆ Ruby開発日記 ◆ Rubyの未来</h3>
<hr class="hr-green" />
<p class="in">昨年11月、テキサス州オースチンでRuby Conferenceが開かれました。このカンファレンスについては先月もこのコラムで簡単に紹介しました。</p>
<p class="in">このカンファレンスのキーノートで、Rubyの今後に関する発表を行いました。今までも今後の構想については小出しにしてきていたのですが、ここ数年、現在のRubyのメンテナンスにばかりに労力を取られて、新しい開発がさっぱり進んでいませんでしたから、ここで自分を発憤させるためにも今後のロードマップを改めて考えてみたのです。あいにく具体的な期日についてはまとまらなかったのですが、今後の計画については整理できたと思います。</p>
<p class="in">まず、今まであいまいにRiteと呼んできたものを、言語仕様と処理系実装に明確に区別することにしました。今後はRubyという言語の新しいバージョンの仕様をRuby2、そしてそのRuby2のための新しい実装をRiteと呼ぶことにしました。</p>
<p class="in">Rubyは誕生以来、少しずつあちこちを修正することで進歩してきました。私の今までのさまざまなデザイン上の判断の集合が今のRubyだと言ってもよいでしょう。しかし、Rubyの開発を始めて10年の間には残念ながら正しい判断ばかりではなく、いくつものデザイン上の間違いも犯してきました。Ruby開発の初期ではユーザーも少なく、仕様も割と流動的でしたが、Rubyのユーザーがこれほど多くなってしまうと、互換性の観点からあまり大きな変更を行うのは難しくなっています。小さいように見える変更でも、世の中に存在する数千、数万のRubyプログラムの中にはその変更によって大きく影響を受けるものがないとは限りません。</p>
<p class="in">しかし、そのような「間違い」を放置しておくことは長い目で見るとRubyのためになりません。「Broken Window Theory（割れ窓理論）」というのがあるそうです。これは、割れた窓を放置しておくことにより、周辺の環境が次第に悪化する、逆にいえば割れた窓をすぐに修理するなど不具合をまめに管理することで良好な環境を維持できる、という理論です。この理論に従えば、デザイン上の間違いを放置しておくことで、Rubyの優れた特質と魅力が次第に失われてしまう（可能性がある）ということになります。互換性と優れた言語の追求、大きな矛盾ではあります。</p>
<p class="in">そこで、このような戦略を立てることにしました。非互換性を生む言語仕様の大きな変更は、たとえ間違いがあっても安易には行わない。これはユーザーが増えてきた言語の設計者の責任でもあると考えます。しかし、言語設計者も人間である以上、間違いは避けられませんから、数年に一度の比較的長いスパンで（基本的な方向性を変えない程度で）非互換性を含む大きな仕様変更を行い、今までの間違いを訂正する機会にすることにしました。互換性が問題になる場合には古いバージョンを使い、時間をかけて移行すればよいのです。</p>
<p class="in">そこでこの機会にRubyの言語仕様を一度総ざらえして、問題を探し、直すべき点があれば一気に直してしまおうという試みがRuby2になります。この仕様の不備やデザイン上の間違いを見落としなく行い、後悔しないRuby2の仕様をデザインするため、多くの人の意見を広く聞く機会を用意しました。将来のRubyに対する仕様変更を提案したい人は、RCR（Ruby Change Request）と呼ばれる形式で提案を行います。そして、その提案についていろいろな観点から議論を行い、生き残ったものがRuby2に取り込まれます。RCRの議論は現在、RCRchiveと呼ばれるサイトで行われています（英語）。</p>
<a id="page_047"/>
<ul class="none">
<li><p><span class="k">RCRchive</span><br />
<span class="link">http://rcrchive.net/</span></p></li>
</ul>
<p class="in">現時点もすでにいくつかの提案が行われています。実は言語のデザインというのは絡み合う要素が多く、なかなかに難しいことで、おそらくはそのうちの大半は採用することはできないでしょうが、言語のデザインに積極的に関わることのできる機会はそれほど多くありませんから、皆さんの中で興味を持たれた方は提案してみてはいかがでしょう。日本人にとっては残念ながら、RCRchiveには英語という壁がありますが、ruby-devメーリングリストでまず日本語で議論してから、みんなで翻訳してRCRchiveに持ち込むという手も考えられます。</p>
<p class="in">そのようにして決まっていったRuby2の仕様の中には、実際に動かしてみなければはたして良いのか悪いのかわからないものがあることでしょう。そこで、現在の実装の延長線上でRuby2の仕様を実験するバージョンとして1.9を用意します。1.9の開発は1.8.1のリリース後からすでに始まっています。まだ大規模な改変は行われていませんが、近いうちに活発な実験が行われる予定です。</p>
<p class="in">現場のRuby言語処理系についてもいくつか問題があります。</p>
<ul>
<li><p>組み込みに向かない</p></li>
<li><p>スレッドセーフでない</p></li>
<li><p>メンテナンス性が低い</p></li>
<li><p>遅い</p></li>
</ul>
<p class="in">Ruby処理系も長らくつぎはぎで開発してきたため、性能的にもメンテナンス性的にも限界が近づいています。また、他のプログラムに組み込むことやネーティブスレッドに対する対応は、当初想定していなかったこともあってどうしても弱い分野です。このような理由から、現在の実装を捨ててまったく新しい実装を行いたいというのがRiteです。また、せっかく再実装するのですから今よりもずっと高速に実行できるようにしたいと考えています。現在の処理系にはボトルネックになりそうな箇所がいくつも見つかっていますから、高速化については希望があるはずです。</p>
<p class="in">具体的な期日は定まっていませんが、個人的な予想としては今年いっぱいはRuby2の設計と1.9による実験が主な活動になるのではないかと考えています。Riteについては私よりも処理系実装に詳しい人の助けを借りることになりそうです。こんな調子ですから、皆さんの元に安定版としてのRuby2をお届けできるのはどんなに早くても来年以降になりそうです。</p>
<p class="in">今まで何年もRiteのことが遅れてきたのは、現在のRubyのメンテナンスに忙しかったこともありますが、言語仕様の改変と言語処理系の実装の2つの大きく複雑な仕事を一緒にやろうとして手に余っていたこと（というか途方に暮れていた）も大きな理由です。今回、言語仕様と言語実装を分離してロードマップを決定したことにより、「新しいRuby」の実現が近づいていくことを希望しています。お楽しみに。</p>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-008.xhtml">&lt;&lt; 前ページ</a>　<a href="p-010.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
