<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第37章 Instiki</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 2</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 2</a>　&gt;　<a href="p-014.xhtml">第37章</a>　&gt;　Ruby開発日記</p>
<!-- Body -->
<a id="page_083"/>
<section id="chap3708" class="level2">
<h3>◆ Ruby開発日記 ◆歴史は繰り返す</h3>
<hr class="hr-green" />
<p class="in">この「Ruby開発日記」の中でもかつて何度も言及したことがあるのですが、プログラミング言語は半世紀を超える非常に長い歴史を持ち、しかも非常にゆっくりと進歩してきました。1つの概念が誕生して世の中に広まるまでに10年、20年かかるのはざらです。</p>
<p class="in">その中で同じようなアイデアが繰り返し繰り返し発明されては消えていきました。なかにはごくまれに何度目かの再発明で初めて成功するものもありますが、たいていは以前に失敗したアイデアはたとえ再登場してもまた消えていくのがオチです。そのようなことはプログラミング言語に限ったことではないのかもしれませんが、今回はプログラミング言語の周辺からそのようなアイデアをいくつか眺めてみて、今後同じような失敗をしないための肥やしにしてみたいと思います。</p>
<section id="chap370801" class="level3">
<h4>ビジュアル言語</h4>
<p class="in">現在のプログラミング言語のほとんどは単語が一列に並んでいるという観点からは、いわば1次元の言語です。これを2次元に拡張しようというのがビジュアルプログラミング言語です。</p>
<p class="in">このアイデアは研究者にとって魅力的に感じられるようで、昔から繰り返し繰り返し登場しています。古くはフローチャートや構造化記法（PAD）などからプログラムを生成しようとする試みがありましたし、中にはPrographのように実際に商品化されたものもあります。しかし、どれも大きな成功を収めたとはいえないように思います。</p>
<p class="in">理由はいろいろあるのでしょうが、私はプログラミング言語の2つの側面を無視したせいではないかと考えています。</p>
<p class="in">1つは、入力の繁雑さです。「旧式」のプログラミング言語は、文章を記述するようにキーボードはぱたぱたと打つだけで入力できますが、ビジュアル言語の多くは、パレットから部品を選んでキャンバスに置き、他の部品と線を連結する、などなどの操作をマウスを使って行う必要があります。入力には特殊なツールが必要ですし、正直なところ、プログラミングのロジックを記述するにはやってられない作業です。初心者にプログラミングの概念をイメージさせる教材としてはいくらか効果があるかもしれませんが、仕事の道具としてはいかにも物足りません。</p>
<p class="in">もう1つは（こちらのほうが本質的なのですが）、人間の思考が基本的に1次元だということです。おそらくは脳の内部では非常に粒度の高いパラレルな処理を行っているのだと思いますが、人間の意識は同時に1つのことを順に行うことに慣れ切っています。この意識に適合するのは多次元的なビジュアル言語よりも、1次元的な旧来の言語のほうが向いているように思います。旧来のプログラミング言語は自然言語の体裁を流用しており、コンピュータは進歩しても人間はそれに適用しきれないというわけです。何千年も使われてきたやり方をなめてはいけません。</p>
<p class="in">今後もロジック記述の方法としてビジュアル言語が主流になることはないと思います。ただし、画面レイアウトのような特殊な領域ではビジュアル言語と呼んでもよいようなものが登場することはあるかもしれません。</p>
</section>
<section id="chap370802" class="level3">
<a id="page_084"/>
<h4>構造エディタ</h4>
<p class="in">私が学生時代にはもう下火にはなっていましたが、70年代から80年代にかけて「構造エディタ」というテーマが流行していました。これはプログラミング言語の文法を理解したエディタで、たとえばブロック構造などを（PADのような）図で表現したり、入力中に構文エラーを報告したりすることができるようなエディタです。</p>
<p class="in">構造エディタのプログラムを図式で表現する部分は、何度繰り返されてもまったく定着しませんでした。これは構造エディタのために新しい言語を用意する、というような研究テーマとしてはともかく実用上はどうかというような戦略の問題だけではなく、ビジュアル言語と同じような理由も含まれていたのではないかと思います。プログラムの見かけは思った以上に重要なのです。</p>
<p class="in">構造エディタの機能のうち、もっと控えめなほうはさまざまに形を変えて最近のエディタやIDE（統合開発環境）に取り込まれています。たとえば、前号のこの連載で紹介したように、Emacsを含む多くのエディタは、オートインデントやプログラムを適切に色付けによってプログラミングを支援してくれますし、RRB（Ruby Referctoring Brower）のように、プログラムの構造を理解した編集支援を行ってくれるツールもあります。</p>
</section>
<section id="chap370803" class="level3">
<h4>文法独立の言語</h4>
<p class="in">プログラミング言語は、実際は外見を決定する文法（シンタックス）と、意味を定義するモデル（セマンティック）とに分けることができます。あえてどちらがより重要かと問われれば、当然セマンティックのほうが重要と答えるわけです。</p>
<p class="in">この考えを推し進めると、セマンティックの方だけを定義しておいて、シンタックスは自由に選べるのはどうだろうか、というアイデアが登場します。このアイデアは古くから何度も何度も登場します。</p>
<p class="in">古くはS式とM式を選択できるLisp、もうちょっと近くでは文法切り替えができる言語を目指したGuile（GNUのSchemeインタプリタ）、最近だとPerl 6チームが開発しているParrotがあります。しかし、どれも成功したとはいえません。Parrotだけはまだ可能性があると思っていますが。</p>
<p class="in">これらが成功するのが難しい理由は、1つは実現の難易度の問題でしょう。複数の言語に対応するセマンティック部分は、それらの言語の公倍数の機能を持つ必要があり、複雑さが格段に上昇してしまうからです。</p>
<p class="in">もう1つの問題は、前にも述べましたが、文法（見かけ）は思ったよりも重要ということでしょう。意味の点から考えると外見は枝葉末節にすぎないのですが、プログラマーの気持ちという点では実に本質に近いところにあるのではないでしょうか。言語ごとに微妙に異なるセマンティックのために意識を切り替えるスイッチとして文法の違いが役立っている、そんな気がします。</p>
</section>
<section id="chap370804" class="level3">
<h4>まとめ</h4>
<p class="in">今回は、プログラミング言語界で日の目を見なかったいくつかのアイデアを観察してみましたが、結論としては「文法が重要」ということでしょうか。言語にとって「見かけ」とか「気分」とかがいかに重要であるかを再確認した思いです。</p>
</section>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-014.xhtml">&lt;&lt; 前ページ</a>　<a href="p-016.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
