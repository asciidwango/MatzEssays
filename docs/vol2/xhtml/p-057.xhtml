<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第68章 美しいコード</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 2</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 2</a>　&gt;　第68章</p>
<!-- Body -->
<section id="chap68" class="level1">
<a id="page_287"/>
<span class="chap-title">Matz Essay</span><span class="chap-num">68</span>
<hr class="chap-hr" />
<h2>
<span class="fontsmall">まつもと ゆきひろのハッカーズライフ</span><br />
美しいコード
</h2>
<hr class="chap-hr" />
<p class="right">[<span class="it">オープンソースマガジン</span>, 2006年12月号]</p>
<div class="newlead">
<p class="in">コードの美しさについて語った記事です。コードの美しさといえば、そのテーマにまるまる一冊を捧げた『ビューティフルコード』（オライリージャパン）があります。この本は著名なプログラマーによるエッセイ集で、実は私も寄稿しています。英語版の<em>Beautiful Code</em>が出版されたのが2007年6月（日本語版は2008年4月）であることを考えると、この時点ではエッセイに取り掛かっていた可能性があります。おそらくは出版前でまだ口外できないものの、作業中のエッセイに触発されてこの記事を書いたものと思われます。とはいえ、今読み返したら、この記事の内容と、実際のエッセイの内容はあんまり重複してませんねえ。</p>
</div>
<section id="chap6801" class="level2">
<h3>ハッカーの好む美しさ</h3>
<hr class="hr-gray" />
<p class="in">新しい日本の総理大臣のキャッチフレーズは「美しい日本」だそうです。日本にはよいところ、美しいところがたくさんあることは承知しているつもりですが、それでも政治の分野で「美しい」という主観的な基準を持ち込むことには少々抵抗があります。「美しい」とは、大変魅力的であると同時に、人によって基準の異なる大変難しい単語でもあるわけです。</p>
<p class="in">政治家と同様に、ハッカーも美しさにこだわります。ハッカーが扱うのは主にソフトウェアですから、こだわりの対象はソフトウェアの美しさです。しかも、たとえばGUIにおけるアイコンのデザインといったアートの美しさよりも、コードの美しさやシステム構成の美しさに対するこだわりのほうが大きいように感じます。この辺は「数式の美しさ」にこだわる数学者の心情<a href="#fn1" class="footnote-ref" id="fnref1" epub:type="noteref" role="doc-noteref">1</a> と似ているのかもしれません。</p>
</section>
<section id="chap6802" class="level2">
<a id="page_288"/>
<h3>どのようなコードが美しいのか</h3>
<hr class="hr-gray" />
<p class="in">では、ハッカーはどのようなコードを美しいと感じるのでしょう。私もコードについて美しいとか醜いとか日々感じているにもかかわらず、改めて「どのようなコードが美しいのか?」と問われると、即答できない自分に気が付きます。</p>
<p class="in">とはいえ、何かあるはずなので考えてみたところ、以下のような基準を思い付きました。</p>
<ul>
<li><p>明快なコード</p></li>
<li><p>単純なコード</p></li>
<li><p>すばらしいコード</p></li>
</ul>
<p class="in">どうやら、私はこのようなコードを美しいと感じているようです。</p>
</section>
<section id="chap6803" class="level2">
<h3>明快なコード</h3>
<hr class="hr-gray" />
<p class="in">以前、社会人になった直後のことですが、Cで書かれているにもかかわらず、どう見てもCOBOLにしか見えないプログラムを読む機会がありました。Cなのに、</p>
<ul>
<li><p>すべての変数はグローバル</p></li>
<li><p>変数名、関数名は連番数字付き</p></li>
<li><p>ファイル先頭には「<code>IDENTIFICATION DIVISION</code>」というコメント</p></li>
</ul>
<p class="ni">というプログラムには、正直、頭がクラクラ<a href="#fn2" class="footnote-ref" id="fnref2" epub:type="noteref" role="doc-noteref">2</a> しました。COBOLがダメだとは言いませんが、TPOがあるだろうと思ったものです。</p>
<p class="in">これは極端な例かもしれませんが、「プログラムとは、文法エラーにならないだけでは十分でなく、その表現に優劣がある」ということを強く感じさせる経験でした。簡単にいうと、「同じ言語で書かれていても、読みやすいプログラムと、読みにくいプログラムがある」のです。</p>
<p class="in">もちろん、コンピュータ側はプログラムの読みやすさなんて気にしません。どんなに超絶技巧を尽くした暗号のようなプログラム<a href="#fn3" class="footnote-ref" id="fnref3" epub:type="noteref" role="doc-noteref">3</a> でも、文法を満足している限り、何の文句もいわずに実行します。しかし人間の場合、そうはいきません。人間は視覚に影響されやすく、またプログラムに埋め込まれている「意図」に敏感に反応するからです。仮にプログラムに登場する名前をまったくランダムな単語で置換したとすると、プログラムの挙動を読み取れなくなる人が続出するでしょう。</p>
<p class="in">プログラムを人間が読む行為は、一般に考えられているよりもずっと重要なことなのです。ほとんどのプログラムは「書いて実行したらそれで終わり」ではなく、バグがあれば、人間がプログラムを読んで、本当にやりたいことと実行内容の違いを見つけ出さなければいけません。他人が書いたプログラムを保守するためにも、プログラムを読まなければいけませんし、自分自身が書いたものでも半年以上経っていれば他人が書いたものと同じような状態になります。</p>
<a id="page_289"/>
<p class="in">となると、プログラムの見栄えや読みやすさも、それだけ重要ということになります。コードは適度にグループ化されているか、関数は適切に分割されているか、変数名や関数名に適切な名前を選んでいるか、あるいはインデントやフォーマットが一貫しているか、そういう見かけが「美しいコード」への第一歩です。</p>
<p class="in">ある程度経験を積んだプログラマーは、それなりに自分のコーディングスタイルを持っています。インデントや制御構造の使い方、名前の付け方などに独自の癖が出やすいからです。以前、私ともう1人のベテランが一緒にプログラムを開発していたときなど、一目見ただけで誰がどの部分を担当していたのかわかったものでした。ある関数の担当が変わると、最初に自分のコーディングスタイルに合わせてリファクタリングしてから作業にかかったからです。途中から意地の張り合いみたいになってしまいましたが。</p>
</section>
<section id="chap6804" class="level2">
<h3>単純なコード</h3>
<hr class="hr-gray" />
<p class="in">単純なコードには美しさを感じます。とはいえ、単純なだけのコードなら誰にでも書けます。しかし、一見とても複雑そうに思える問題の本質をとらえて、的確に分割し、単純な部品の組み合わせに切り分けられたコードを見るのは喜ばしいものです。単純なコードに美しさを感じるのは、複雑さの中に隠された秘密を解き明かし、鋭利な切り口で切り出してくる職人芸に対して感銘を受けるからかもしれません。</p>
<p class="in">単純なコードは、理解しやすく、変更に強いものです。しかし、この単純さは適切な分析によって取り出されたからこそ得られるもので、ただ漫然と問題に当たっていただけでは得られません。最初の単純さを生み出す過程<a href="#fn4" class="footnote-ref" id="fnref4" epub:type="noteref" role="doc-noteref">4</a> にこそ、美しさの秘密が眠っています。</p>
<p class="in">たとえば、デザインパターンは「単純な美」を実装したものでしょう。ソフトウェア開発にしばしば登場するパターンに名前を付けたカタログであるデザインパターンは、典型的な問題を解決するための分析を優秀なプログラマーが一生懸命考えてくれたおかげで、生み出されたものです。これらのパターンはよく考えられていて、問題が必要以上に複雑にならないように、各オブジェクトに役割が適切に分担されていますし、将来の変化への対応も局所的に解決できるようになっています。このような理解しやすさや変更への強さなどが、ハッカーにソフトウェアを美しいと感じさせる原因なのでしょう。</p>
</section>
<section id="chap6805" class="level2">
<h3>すばらしいコード</h3>
<hr class="hr-gray" />
<p class="in">外見が美しいコード、構成が美しいコードは、確かに美しいのですが、これだけでは真にハッカーの心を打つコードとはいえません。真に必要なのは「驚き」です。つまり、普通に考えてはできそうもないことをさらりとやってのけるコードに美しさを感じます。その本質はアルゴリズムにあります。</p>
<p class="in">最近、感動した例としては、圧縮されたインデックス検索を行うコードです。通常、全文検索などで用いるインデックスは、文書量が大きくなるとそれに比例する形でサイズが増加します。ある程度以上大きなインデックスは扱いにくいし、ディスク容量の問題も発生するので圧縮したいのですが、インデックス操作の効率は検索速度に直結します。空間効率を取るか、実行効率を取るかは難しい問題です。</p>
<a id="page_290"/>
<p class="in">ところが、両方の効率を一度に実現するすばらしいアイデアがあったのです。通常、データ圧縮に用いるハフマンコーディングという技法は、頻出する「単語」に短いコードを、あまり登場しない「単語」に長いコードを割り振ることで圧縮を行います。このため、圧縮データは単語辞書と辞書によるコード化を行った文書の組み合わせになります。一方、全文検索に用いる転置インデックスは、単語辞書と出現位置の組み合わせですから、本質的に類似した構造を持っています。圧縮辞書検索はこの類似を利用して、圧縮されたままインデックスを直接検索できるテクニックです。これを最初に見たときには、やられたと思いました。発想による美しいコード、私にとってこれが最も美しいコードに感じられます。</p>
</section>
<section id="chap6806" class="level2">
<h3>まとめ</h3>
<hr class="hr-gray" />
<p class="in">ハッカーがコードに感じる美しさについて、書きつづってみました。実利主義的なハッカーは、読みやすい、変更しやすいなど実用的なコードに美しさを感じます。しかし、頭の良い人の書いたコードに対する<ruby>羨望<rt>せんぼう</rt></ruby>（や嫉妬）のような感情からも美しさを感じるようです。自分の書いたコードを読み返すと、美しいものもそうでないものもあります。皆さんも、美しさという観点からコードを眺めてみてはいかがでしょう。</p>
</section>
</section>
<section id="footnotes" class="footnotes footnotes-end-of-document" epub:type="footnotes">
<hr />
<ol>
<li epub:type="footnote" id="fn1">
<p><span class="k">「数式の美しさ」にこだわる数学者の心情</span></p>
<p>映画『博士の愛した数式』では、オイラーの等式が美しい数式の典型として登場している。数学オンチの私にはよくわからないけれども。
<a href="#fnref1" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
<li epub:type="footnote" id="fn2">
<p><span class="k">正直、頭がクラクラ</span></p>
<p>そのプログラムを一緒に眺めていた先輩は「どんな言語でもCOBOLは書けるんだよ」としみじみ語っていた。
<a href="#fnref2" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
<li epub:type="footnote" id="fn3">
<p><span class="k">超絶技巧を尽くした暗号のようなプログラム</span></p>
<p>実例としては、毎年開催されるIOCCC（International Obfuscated C Code Contest）に参加しているコードがあげられる。びっくりすること、請け合い。<br />
<span class="link">http://www.ioccc.org/</span>
<a href="#fnref3" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
<li epub:type="footnote" id="fn4">
<p><span class="k">単純さを生み出す過程</span></p>
<p>これは優れた工芸品に対して受ける感動と同類のものだと思われる。あるいは、雪の結晶のような自然の作り出す、シンプルであると同時に神秘的な美しさにもつながる。
<a href="#fnref4" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
</ol>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-056.xhtml">&lt;&lt; 前ページ</a>　<a href="p-058.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
