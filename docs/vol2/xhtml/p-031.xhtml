<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第45章 ダイコン</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 2</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 2</a>　&gt;　<a href="p-030.xhtml">第45章</a>　&gt;　Ruby開発日記</p>
<!-- Body -->
<section id="chap4508" class="level2">
<a id="page_179"/>
<h3>◆ Ruby開発日記 ◆ 文字コードの<ruby>憂鬱<rt>ゆううつ</rt></ruby></h3>
<hr class="hr-green" />
<p class="in">テキストが記号の羅列のようになってしまう文字化けは困りものです。海外でも「Moji-Bake」と呼ぶことがあると聞いたことがあります。これは全部「文字コード」が悪いのです。</p>
<p class="in">コンピュータは基本的にオンとオフで構成される2進数しか扱えませんから、数値以外のデータを直接取り扱うことはできません。テキストやそれを構成する「文字」は一度数に直してから処理します。コンピュータに表現させようとする文字の集まりを「文字集合」、文字集合に属する個々の文字を数に置き換える処理を「文字符号化」といいます。この「文字符号化」の方法を俗称として「文字コード」と呼びます。アルファベットのための符号化方法としてはASCII（ISO646）が有名です。古くはEBCDICという符号化系も存在していたそうですが、今では一部の汎用機を除いては使われなくなっています。</p>
<section id="chap450801" class="level3">
<h4>西洋の歴史的事情</h4>
<p class="in">ASCIIが事実上唯一の標準となった英語のアルファベットについてはほとんど問題は生じません。問題はそれだけでは表現できない文字があることです。ヨーロッパには英語で用いられる「通常」のアルファベットの他に、アクセント記号などの付いた文字を使う言語があります。これらはASCIIでは表現しきれません。幸い、ASCIIはアルファベットと記号だけで128文字以下しか使わないので1バイトのうち7ビットしか消費していませんでした。そこで、（もともとはパリティとして使われていた）残りの1ビットを使って導入した128文字にそれらの文字を割り振った「文字コード」が設計されました。これがISO-8859です。ISO-8859には国ごとにいくつかのバリエーションがあり、ISO-8859-1からISO-8859-16まであります。一番広く使われているのがISO-8859-1、通称Latin1です。</p>
</section>
<section id="chap450802" class="level3">
<h4>わが国の歴史的事情</h4>
<p class="in">アルファベットのような表音文字は文字の種類が少ないため、1バイトあれば全部の文字がなんとか表現できます。しかし、日本語の数千の表意文字はとても1バイトでは表現しきれません。</p>
<p class="in">汎用機全盛の昔にはEBCDICコードの空き領域にカタカナを割り当てたEBCDIKという文字コードが使われていたそうです。その後、ASCIIが広まるとISO-8859と同様の方法でカタカナを取り込んだJIS-X-0201が登場しました。これがいわゆる半角カナです。</p>
<p class="in">しかし、カタカナだけではどうにも読みにくいので、通常使う全部の文字を表現したいという要求は当然でした。そこで登場したのが、世界初の多バイト文字コードであるJIS-X-0208でした。これはISO-2022という規格で定められた枠組みに従い、複数バイトで1文字を表現することで、ひらがな、カタカナ、漢字、記号、ギリシア文字など数千の文字を含む文字集合を表現できる文字コードです。今でも電子メールは基本的にこの文字コードを使っています。</p>
<p class="in">しかし、ISO-2022の定める枠組みは「ここからはアルファベット」「ここからは漢字」というように文字種を切り替える仕組みになっていますから、コンピュータによってテキスト処理をするのにはどうにも使いにくい方式でした。場所によって同じバイト列の持つ意味が変化するので、いつも先頭から1バイトずつスキャンしなければなりません。</p>
<a id="page_180"/>
<p class="in">それを解決するために登場したのがシフトJISです。シフトJISは、以下のような条件を満たす文字コードとして登場しました。</p>
<ul>
<li><p>マルチバイト文字の先頭バイトは最上位ビットがオンである</p></li>
<li><p>先頭からスキャンしなくても処理可能</p></li>
<li><p>当時すでに広く使われていた半角カナと共存可能</p></li>
<li><p>JIS-X-0208の文字からテーブルを使わなくても変換可能</p></li>
</ul>
<p class="in">シフトJISは文字コード、つまり文字に対応する番号がJISの文字番号をずらす（シフトする）ことによって得られるから、このように名付けられたそうです。シフトJISは本誌（Linux Magazine）を出版しているアスキーの技術者が発明したのだと聞いています。シフトJISはマイクロソフトによって採用され、PC業界で広く用いられました。</p>
<p class="in">一方、UNIX業界ではEUC（Extended UNIX Code）と呼ばれる文字コードが使われていました。シフトJISでは半角カナの領域を避けるため、漢字などのマルチバイト文字の一部は通常のASCIIの範囲と重なっていましたが、EUCでは半角カナの使用をきっぱりあきらめたため、マルチバイト文字は最上位ビットがオンのバイトだけから構成されます。これにより、マルチバイト文字とシングルバイト（ASCIIの範囲）文字とが明確に区別できます。</p>
<p class="in">このような歴史的事情により、日本ではJIS-X-0208（通称JIS）、シフトJIS、EUCの3種類の文字コードが広く使われることになりました。JISは比較的簡単に区別が付きますが、シフトJISとEUCはテキストから自動的に区別することは困難です。文字コードの判定を間違えたときは当然正しい文字を表示できません。これが文字化けの原因です。1つの国で3種類もの文字コードが並列して使われた例は珍しいと思います。日本は文字化け先進国だったのです。ちっともうれしくありませんが。</p>
<p class="in">おかげで日本では複数の文字コードを切り替えて処理する技術が発展しました。</p>
</section>
<section id="chap450803" class="level3">
<h4>海外の事情</h4>
<p class="in">表意文字を使うアジアの各国では状況は似たようなものです。韓国ではEUCとほぼ同じ符号化方法であるEUC-KRが主に用いられています（EUC-KRと対比して日本のものをEUC-JPと呼びます）。中国ではGB2312、台湾ではBig5と呼ばれる文字コードがあります。どれも似たような方法でマルチバイト文字を表現しています。幸い、日本のように1つの国の中で複数の文字コードが対立するような事態はあまり起きなかったようですが、国際的に情報交換ができないのは問題です。</p>
<p class="in">その問題に対する答えとして登場したのがUnicodeです。Unicodeは古今東西の文字をすべて表現できる文字集合を目指して開発されました。過去の反省を生かしていろいろとうれしい点も多いUnicodeですが、「Unicodeに含まれない文字は救済不可能」などの課題も残っています。結局、プログラムが対応しなければならない文字コードがまた1つ増えたというのが現実のようです。Unicode以後の文字処理の話はまた今度。</p>
</section>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-030.xhtml">&lt;&lt; 前ページ</a>　<a href="p-032.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
