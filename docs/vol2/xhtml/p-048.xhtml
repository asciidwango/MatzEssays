<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第59章 スケーラビリティ</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 2</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 2</a>　&gt;　第59章</p>
<!-- Body -->
<section id="chap59" class="level1">
<a id="page_251"/>
<span class="chap-title">Matz Essay</span><span class="chap-num">59</span>
<hr class="chap-hr" />
<h2>
<span class="fontsmall">まつもと ゆきひろのハッカーズライフ</span><br />
スケーラビリティ
</h2>
<hr class="chap-hr" />
<p class="right">[<span class="it">オープンソースマガジン</span>, 2006年3月号]</p>
<div class="newlead">
<p class="in">原子やそれ以下の素粒子の振る舞いが、われわれの日常生活の常識では考えられない挙動をとる量子力学的構造が、プログラミングの世界でも成立して、データ量やアクセス数などが増加すると、思いもかけない挙動が発生することを予見した記事。文中で「プログラミング言語では過去20年間大きな変化が起きていない」とありますが、それから約20年経ってもあまり大きな変化は起きていないようです。もちろん、動的言語全盛期の当時と、静的言語が流行している現在とではいろいろ異なることもありますが、当時まったく存在していなかった概念ではないという意味で。現在でもスケーラビリティは未来予測のための重要なキーワードだと思います。大きな構造は時間が経ってもそれほど変化しないようです。</p>
</div>
<section id="chap5901" class="level2">
<h3>20年間大きな変化のないプログラミング言語</h3>
<hr class="hr-gray" />
<p class="in">先日、某雑誌のインタビューに答えているときに「プログラミング言語の領域では、ここ20年革新的な進歩は起こっていない」と発言して、記者の人を驚かせてしまいました。「これだけ進歩の激しいIT業界にあって、20年間にわたって革新的な進歩のないとはいったいどういうことか」という顔をしていました。</p>
<p class="in">前回でも紹介したように、プログラミング言語において革新的な「発明」はLispの周辺でみんなずっと昔に登場してしまっています。進歩しているように見えるのは、最近になってようやっと世間が追いついてきて、昔から存在していたものを「再発見」しているからです。オブジェクト指向に例外処理、ガベージコレクションやバーチャルマシンも何もかも、もう何十年も前から存在していたのです。知られてなかっただけで。</p>
<p class="in">もっともプログラミング言語というものは、もともと人間が自分の考えをどのように表現するかという「記法」としての性質が強いですから、人間の本質がなかなか変化しない以上、あまり急激には進歩できない領域ではあります。</p>
<a id="page_252"/>
<p class="in">プログラミング以外の領域においても、決して進歩が速いとはいえそうにありません。急激に普及したネットワークの分野でも、改めて考えてみれば、今でも日常的に使われているメールが最初に発信されたのはもう30年以上前のことですし、インターネットの誕生からも同じくらいが経過しています。Webは確かに目新しいアイデアですが、それを構成している技術的要素は古くから存在していたもので、決して革新的なものではありません。</p>
<p class="in">結局、普通の人が感じている「ITの目覚ましい発展」とは、実際には「ITの目覚しい進歩」ではなく、「ITの目覚しい普及」にすぎなかったのでしょう。今まで知らなかったからといって、存在していなかったとは限りませんからね。</p>
</section>
<section id="chap5902" class="level2">
<h3>ハードウェア領域の目覚しい進歩</h3>
<hr class="hr-gray" />
<p class="in">ソフトウェアの領域と比べて、ハードウェアの方の進歩には目覚しいものがあります。</p>
<p class="in">1946年、世界最初の電子計算機と呼ばれたENIACは、1秒間に5000回の演算を行うことができたそうです。ということは、0.005MIPS<a href="#fn1" class="footnote-ref" id="fnref1" epub:type="noteref" role="doc-noteref">1</a> ということになりますね。さて、私の愛用のコンピュータでbogoMIPS<a href="#fn2" class="footnote-ref" id="fnref2" epub:type="noteref" role="doc-noteref">2</a> を計算するとだいたい3162bogoMIPSになるので、大ざっぱに比較すると63万2400倍になります。63万倍ですか……。技術に進歩は恐ろしいものですね。</p>
<p class="in">ところが、これらの変化が本当に「革新的」と呼べるものかというとよくわかりません。実際、世界で最も多く使われているCPUはいまだに30年以上前の命令アーキテクチャを引きずっているわけですし、逆に真に革新的だと思われたiAPX432<a href="#fn3" class="footnote-ref" id="fnref3" epub:type="noteref" role="doc-noteref">3</a> などのCPUアーキテクチャはほとんど失敗に終わっています。これらは連続的な進歩であって、別に革新的なことではないのかもしれません。小さな工夫を積み重ねてハードウェアの性能を向上させ、大量生産によって価格を低減し、高い計算能力を備えたデバイスを広く普及させてきた、不断の努力の結果だといえるでしょう。このような変化は連続的なものですが、偉大な変化でもあります。</p>
<p class="in">実際、63万倍の変化は馬鹿にできません。同じx86アーキテクチャで比較しても、1978年リリースの8086/5MHz（0.33MIPS程度）と2004年リリースのPentium M/1.6GHz（3162MIPS程度）では、26年間にMIPS値が9500倍以上になっています。</p>
</section>
<section id="chap5903" class="level2">
<a id="page_253"/>
<h3>スケールによる劇的な変化</h3>
<hr class="hr-gray" />
<p class="in">以上のことから、ITの変化というのは、ソフトウェアの進歩よりもハードウェアの性能向上と、価格低下による普及によって実現されてきたといっても過言ではないでしょう。これまでの歴史では考えられなかったような高性能のコンピュータが、広く、多く、大量に使われるようになっているのです。連続的な変化とはいっても、これだけスケールが伴うと大きなインパクトが発生します。</p>
<p class="in">物理学の領域では、極端にスケールが違うとまったく違う法則に従うことが知られています。たとえば、極端に小さな素粒子の世界では、粒子はある場所に確率的にしか存在しないとか、どんなに観測精度を向上させても決して確定させることができない事象が存在するとか、日常的な常識では考えられないこと<a href="#fn4" class="footnote-ref" id="fnref4" epub:type="noteref" role="doc-noteref">4</a> が起こります。また、逆に何億光年という極端に大きなスケールにおいても、異なる法則が登場してきます。</p>
<p class="in">今、この瞬間にITの世界でも似たようなことが発生しているような気がしてなりません。20年前、私たちがやりとりするメールの数は一日数通とかそんなものでした。しかし、今や一日数百通のメールを受け取るのは普通ことで、中には数千通を受け取る人もいるでしょう。世界中に数千ページしかWebページが存在しなかった頃と、数億ページの情報があふれている現在とでは、情報の探し方も異なってくるはずです。</p>
<p class="in">このような変化を発生させている元凶は、人間にあります。数百通のメールを管理を想定して設計されたアプリケーションで数百万通のメールの管理をすることは不可能ではないでしょうが、たぶんいろいろな局面で不都合が発生することでしょう。メールの処理に耐えがたい時間がかかったり、必要なメールを見つけ出すことができなかったり。あるいは、数億ページのWebからある単語を含むページを探し出すことは、通常のテキストファイルを検索するgrepのようなツールが用いているのと同じアルゴリズムを用いても不可能ではないでしょうが、ベタに検索したのでは結果が出るまで何日もかかるでしょうし、検索結果として得られたその単語を含んでいる数万ページのうち、どれが重要か判別することはほとんど不可能でしょう。人間には忍耐力にも取り扱うことのできる複雑さにも限界があるのです。</p>
<p class="in">このことをいち早く認識していたのがGoogleです。彼らは、ある情報を含むページをただ単にリスト化するだけでは不十分であり、どのページが重要であるかを高速かつ自動的に行う必要があることを認識していました。PageRankという手法を導入した彼らの検索エンジンは既存のライバルたちよりも「よい結果」を返し、Googleは後発ながらもあっという間に首位の座を獲得したのです。</p>
</section>
<section id="chap5904" class="level2">
<h3>キーワードはスケーラビリティ</h3>
<hr class="hr-gray" />
<p class="in">ということで、これからのキーワードは「スケーラビリティ」になると予想します。今までと同じペースかどうかはともかく、コンピュータの性能はこれからも向上していくでしょう。また、ネットワークにつながれたコンピュータの台数や、それらの持つ記憶容量、また流通する情報量は、想像を超えるレベルで増加するはずです。「そのような事態にどう対処するか?」が今後最も大きな課題になっていくわけです。</p>
<p class="in">考えてみれば、増大する複雑さに対処するというのは、プログラミング言語を始めとしたソフトウェアが長年直面してきた課題ですが、これからはその増加速度がどんどん加速するのではないでしょうか。</p>
<a id="page_254"/>
<p class="in">エクストリーム・プログラミング（XP）は、「テストがよいものであれば、限りなく頻繁に行えばよいだろう」「コードレビューがよいのであれば、いつもレビューしながらプログラムすればよいだろう」というように、ボリュームを極端（エクストリーム）にひねってみることから誕生したのだそうです。IT業界の未来を予想する際も、ボリュームを極限までひねってみるのがよいかもしれません。たとえば、「インターネットユーザーが数十億人を超えたらどうなるだろう」とか「一日に受け取るメールが数万通を超えるようになったらどうしたらよいだろう」など。そのときは、できるだけ機械化・自動化する（Google PageRankの例）、みんなの力を結集する（Wiki、ソーシャルタギング<a href="#fn5" class="footnote-ref" id="fnref5" epub:type="noteref" role="doc-noteref">5</a> などの例）、非同期化してクライアントに処理を分散する（Ajaxなどの例）といった技法をいろいろと考案していく必要があります。ふと考えてみると、これらはみな最近話題になっているWeb 2.0<a href="#fn6" class="footnote-ref" id="fnref6" epub:type="noteref" role="doc-noteref">6</a> で注目されているものだったりします。Web 2.0を説明するには、スケーラビリティの観点から行うとよいかもしれません。</p>
<p class="in">私の得意なプログラミング言語の領域でも、「ある言語から利用可能なライブラリが数万を超えたらどうなるだろう」とか「名前の衝突の回避や組織化をどう行えばよいのか」など、いろいろ考えることはありそうです。</p>
</section>
</section>
<section id="footnotes" class="footnotes footnotes-end-of-document" epub:type="footnotes">
<hr />
<ol>
<li epub:type="footnote" id="fn1">
<p><span class="k">MIPS</span></p>
<p>Million Instructions per Secondの略。CPUが1秒当たりに処理できる命令数を100万命令単位で表現した数値。CPUの性能を比較するおおざっぱな指標として、ふた昔前に用いられた。もっともコンピュータの性能はI/Oなどトータルなシステムで決定されるので、処理命令数だけでは決まらない上、命令によって処理時間が異なったりするCPUもあるので、結局、指標としては廃れてしまった。
<a href="#fnref1" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
<li epub:type="footnote" id="fn2">
<p><span class="k">bogoMIPS</span></p>
<p>Linuxが内部で計算する「非科学的な」MIPS値。CPUの大まかな性能を示すが、厳密なベンチマークに使えるほど正確な値ではない。ただ、Linuxマシンであればすぐに得られるので便利な値でもある。<code>/proc/cpuinfo</code>を表示させることで確認できる。
<a href="#fnref2" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
<li epub:type="footnote" id="fn3">
<p><span class="k">iAPX432</span></p>
<p>1981年、i80386に先立って発表されたインテル初の32ビットプロセッサ。
<a href="#fnref3" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
<li epub:type="footnote" id="fn4">
<p><span class="k">日常的な常識では考えられないこと</span></p>
<p>日常的なスケールでは無視しても実質的に変わらないため、これらを考慮しない法則が使われている。
<a href="#fnref4" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
<li epub:type="footnote" id="fn5">
<p><span class="k">ソーシャルタギング</span></p>
<p>ソーシャルブックマーク（Web上に登録していくブックマークシステム）などに集積された情報にタグを付加してカテゴライズする方法。
<a href="#fnref5" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
<li epub:type="footnote" id="fn6">
<p><span class="k">Web 2.0</span></p>
<p>次世代Webの主流となるべきスペックやポリシーのこと。現段階では、はっきりした定義が決められているわけではない。
<a href="#fnref6" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
</ol>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-047.xhtml">&lt;&lt; 前ページ</a>　<a href="p-049.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
