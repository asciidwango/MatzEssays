<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第9章 配列</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 1</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 1</a>　&gt;　<a href="p-016.xhtml">第9章</a>　&gt;　Ruby開発日記</p>
<!-- Body -->
<section id="chap0912" class="level2">
<a id="page_124"/>
<h3>◆ Ruby開発日記 ◆ Ruby 1.8</h3>
<hr class="hr-green" />
<p class="in">Ruby 1.6.0が2000年9月19日にリリースされてからはやくも1年以上が過ぎ、そろそろ次の安定版である1.8はどうだろうかという話が流れるようになってきました。CVSで開発されている1.8候補の1.7系でもなかなか積極的な開発が行われているようです。</p>
<p class="in">個人的には2001年中に1.8をリリースするつもりですから、もしかすると皆さんがこれを読んでいるときにはすでにリリースされているかもしれません。もっともRubyの開発においてリリースが遅れるのはさほど珍しいことではないので、期待させといてまだってことも十分にありえるのですが。</p>
<p class="in">では、実際にリリースされることになるRuby 1.8の新機能というのはいったいどのようなものになるのでしょうか?</p>
<p class="in">今年の5月に本誌の出版社であるアスキーを会場に開催されたYet Another Ruby/Perl Conference 19101（YARPC19101）におけるプレゼンテーションで、私はRuby 1.8には以下の項目が新たに追加されると発表しました。</p>
<ul>
<li><p>メソッドの追加</p></li>
<li><p>世代別GC</p></li>
<li><p>多言語対応</p></li>
</ul>
<p class="in">このときの発表資料は、</p>
<ul>
<li><p><span class="link">http://www.ruby-lang.org/ja/yarpc01/index.html</span></p></li>
</ul>
<p class="ni">で読めます。</p>
<p class="in">しかし、非常に残念なことに重要で期待されていた後者2つは1.8には取り込まれないことになりそうです。</p>
<section id="chap091201" class="level3">
<h4>世代別GC</h4>
<p class="in">広島市立大の木山さんが基礎部分を開発した世代別GCは当時のGC性能を非常に向上させたので、将来取り込まれることが相当期待されていた機能です。</p>
<p class="in">RubyのGC（ゴミ集め）機能は普段は非常に優秀に働いてくれるのですが、大量のオブジェクトを保持するパターンのプログラムにおいて、もう使われなくなったゴミを集めるためのコストが実際の処理を圧迫する結果になり、十分な性能が出ないケースがありました。</p>
<p class="in">ところが、世代別GCとは別に行ってきたGCの改善の結果、現在の世代別GCの実装に対する以下の2つの点が明らかになったのです。</p>
<ul>
<li><p>GC性能が向上し、世代別方式を使わなくても性能にほとんど差が出ない</p></li>
<li><p>改善が世代別GCと相性が悪く世代別GCによる性能向上を妨げる</p></li>
</ul>
<a id="page_125"/>
<p class="in">この結果から、現在の実装のまま世代別GCを導入することによるメリットが開発当初よりもかなり下がってしまいました。</p>
<p class="in">しかし、将来にわたって世代別GCがダメだというわけではありません。世代別GCは最近の性能を要求される処理系では広く用いられている方式で、方式そのものの有効性には疑問の余地はありません。今回の開発の知識と経験を生かし、次世代Rubyにはぜひとも世代別GCを取り込みたいと考えています。</p>
</section>
<section id="chap091202" class="level3">
<h4>多言語対応</h4>
<p class="in">多言語対応はCVSのruby<code>_</code>m17nブランチとして公開されています。この実装は、</p>
<ul>
<li><p>ASCII</p></li>
<li><p>SJIS</p></li>
<li><p>EUS</p></li>
<li><p>UTF-8</p></li>
<li><p>Latin1 (ISO-8859-1)</p></li>
</ul>
<p class="ni">の各種エンコーディングをそのまま取り扱えるうえ、わずかなCのコードを動的ライブラリとして追加するだけで、他のエンコーディングにも対応できるようになるという優れものです。</p>
<p class="in">個人的にはこれこそが多言語対応のあるべき姿（の1つ）だと信じています。では、その多言語対応が1.8に取り込まれない（だろう）というのはどういうことなのでしょうか。</p>
<p class="in">理由は大きく分けると2つあります。1つは使い勝手を含めた機能の問題です。つまり、各種エンコーディングをそのまま扱うコアになる部分は実装したものの、それをどのようにユーザーに見せれば、多言語対応、ひいては国際化までを支援できるかということについて詰めきれなかった点です。これは多くの経験ある意見の集約が必要だと思われますが、なかなか時間内にまとめきれませんでした。この点にこだわってこれ以上1.8のリリースを遅らせるのは得策ではないと考えました。</p>
<p class="in">2つめは最初のものとも関連するのですが、互換性についてです。国際化対応は文字列を文字単位で扱うので、現在のバイト単位で扱っている文字列とは一部互換性がなくなります。明示的にバイト列であると指定することで互換性の問題を回避することは可能なのですが、今度は多言語対応に制約が出る場合があります。この部分の仕様についてももっと詰める必要があったのですが、これまた時間切れです。</p>
</section>
<section id="chap091203" class="level3">
<h4>先送り</h4>
<p class="in">しかし、1.8.0にこれらが含まれないからといって、これらを捨てたりあきらめたりするわけではありません。今後、別の機会に取り込みたいと考えています。もしかすると、それは思ったよりも早いかもしれません。1.8.2とか。</p>
</section>
<section id="chap091204" class="level3">
<h4>さらにその次</h4>
<p class="in">YARPC19101での発表にもあったように、その次も待っています。</p>
<p class="in">1.8のリリースができたら（そして私の心に余裕ができたら）、そのときこそ心機一転、次のメジャーリリースになるインタプリタの開発に取り掛かりたいと思っています。Riteというコードネームを持つこのインタプリタは今まで9年近いRubyの開発で学んできたことを踏まえて、今までの不満や問題を（できる限り）解消したものにしたいと考えています。Riteはまだ実体のないベーパーウェアにすぎませんが、ぜひ早く取り掛かりたいものです。</p>
</section>
<section id="chap091205" class="level3">
<a id="page_126"/>
<h4>次回予告（?）</h4>
<p class="in">というわけで、2002年初頭までには1.8がリリースされていることでしょうから、（うまくいけば）来月あたり1.8の新機能を紹介できればと考えています。</p>
</section>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-017.xhtml">&lt;&lt; 前ページ</a>　<a href="p-019.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
