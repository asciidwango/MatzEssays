<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第22章 スレッド（その1）</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 1</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 1</a>　&gt;　<a href="p-049.xhtml">第22章</a>　&gt;　Ruby開発日記</p>
<!-- Body -->
<section id="chap2209" class="level2">
<a id="page_319"/>
<h3>◆ Ruby開発日記 ◆ スピード狂</h3>
<hr class="hr-green" />
<p class="in">私が住んでいる田舎では、歩いていける範囲内では買い物も満足にできないし、公共交通機関も発達していないので、結果として自動車は必需品です。自動車は地球環境の観点からはあまり望ましくない乗り物なのですが、実に便利な道具です。自動車のハンドルを握るとついついスピードを出してしまう人がいます。私は無茶な運転はしないように心がけているつもりですが、常に法定速度以内で運転するのはなかなか難しいものです。</p>
<p class="in">自動車のスピードの出しすぎは命に関わる場合があるので止めたほうがよいのですが、コンピュータ業界は全体として「スピードは善である」というポリシーが徹底しているように思います。</p>
<p class="in">実際にコンピュータのハードウェアはどんどん進化しています。インテルの創立者ゴードン・ムーアの提唱したムーアの法則によればLSIの集積度は18カ月で2倍になるのだそうです。集積度が上がるにつれて性能も飛躍的に向上しています。</p>
<p class="in">今から60年近く前、世界最初の汎用デジタルコンピュータENIACが登場したとき、「これが3台あれば世界中の計算がまかなえる」といわれたものでした。調べてみるとENIACは1秒間に5000回の加算が可能であったのだそうです。</p>
<p class="in">アーキテクチャがまったく違うため現代のCPUと比較することは難しいですが、単純に加算に必要な時間を（クロック周波数×パイプラインのステージ数）で計算するとなると1GHzのPentium 3（ステージは10段）ではCPUならば同じ時間に200万倍以上の計算ができることになります。世界に3台どころじゃありませんね。今や机の上にENIACの200万倍の計算パワーが乗っているわけです。恐るべし。</p>
<p class="in">ハードウエアと比較すると、ソフトウェアのほうはそう簡単には進歩しません。アルゴリズムの教科書などを見てみても主要なアルゴリズムは30年も40年も前に発見されたものばかりで、最近画期的なアルゴリズムが見つかったなんて話はとんと聞きません。昔はハードウェアはなかなか変更できなくて、ソフトウェアは変更しやすいから「ハード」と「ソフト」と呼んだと聞くのですが、3年前に話題になった2000年問題などを思い起こすと今やソフトウェアのほうがよっぽど硬いという気がしてきます。ハードの方はどんどん進歩するので、それに甘えているということもあるかもしれません。なにしろ何もしなくても新しいハードを導入すれば同じソフトウェアが高速に動作するんですから。</p>
<p class="in">しかし、いくらハードの進化が速くても私の目の前のコンピュータが自動的に高速になるわけではないので、ソフトウェアのほうでも高速化のための地道な努力が必要です。悲しいことにソフトウェアはハードウェアのように簡単に何倍も高速になったりはなかなかしないので。</p>
<p class="in">しかも、ハードウェアの進歩以上に処理速度が要求される分野はいつの時代にも存在するので、ソフトウェア技術者の中にも処理速度向上のためなら手段を選ばないスピード狂はかなりいます。高速化が難しいぶん、あるいはハードウェア技術者より多いかもしれません。</p>
<section id="chap220901" class="level3">
<a id="page_320"/>
<h4>ソフトウェアの高速化</h4>
<p class="in">ソフトウェアの高速化はむやみに行っても効果が薄いことが多々あります。効率のよい高速化のためには従わなければならない鉄則がいくつかあります。</p>
<p class="in">最初の鉄則は「正しく動いてから高速化」です。正しく動かないソフトをいくら高速化しても意味がありません。また、高速化の過程ではバグが混入しますが、もとからちゃんと動いていないプログラムでは、高速化のせいだかなんだか判断できません。いくら高速化マニアでもプログラムが一応の完成を見るまではじっと我慢です。</p>
<p class="in">2番目の鉄則は「正しく計測する」です。プログラムが速くなったかどうかは時間でわかりますが、処理時間は動作パターンによって大きく変化します。実際には使わないような人工的なパターンで計測したために、実際の処理はちっとも速くなってないというのもありがちなケースです。また、外部からの影響を受けて計測結果が変動することもたびたびあります。外部からの影響を避けるため、何度も繰り返して計測し、最も速いもの（平均ではない）を選ぶなどの工夫が必要です。あるいは起動してから終了するまでの時間ではなく、消費したCPU時間を計測するのもよい方法です。CPU時間の計測にはtimeコマンドを使います。</p>
<p class="in">3番目の鉄則は「改善の対象を正しく選ぶ」です。世の中のほとんどの現象には「80:20則」とか「90:10則」が当てはまります。つまり、「80%の時間が20%のコードで消費される」とか「90%のコストが10%の部分に費やされる」とかいう状態です。ですから、効率の悪い部分の改善してその部分の実行速度を10倍にしたとしても、全体のうちその部分が占めていた割合が1%しかなかったら、全体としては99.1%しか高速化しません。まず時間を最も消費しているボトルネック部分から高速化するべきです。</p>
<p class="in">4番目の鉄則は「正しいアルゴリズムを選ぶ」です。高速化の手法は大きく分けると2種類あって、1つはアルゴリズムを変更することで、もう1つはいわゆる「小手先の変更」です。小手先の変更とは、たとえばコードの無駄を省いたり、一度計算した結果を保存しておいて再利用するなどの比較的小規模な変更です。小手先の変更のほうが、簡単ですぐに思い付くのでそちらに走りやすいのですが、まず「この処理に使っているアルゴリズムは最も高速なものか」ということを検討する必要があります。小手先の変更ではかなり運がよくても実行速度は数割しか変化しません。ほとんどの場合は数%程度でしょう。しかし、アルゴリズムの変更の場合にはもっと劇的な変化が期待できます。場合によっては100倍や1000倍の変化も夢ではありません。適切なアルゴリズムを選んだ後、初めて小手先の変更を行うようにしましょう。</p>
<p class="in">このような鉄則に従うことによって、ソフトウェアの無駄が取り除かれ、効率よくソフトウェアの高速化を行うことができます。</p>
<p class="in">私を含めて多くのソフトウェア開発者にとってソフトウェアのチューニングは楽しい側面も持っています。自分の作業の成果が目に見える数字（実行時間）として現れるため、達成感が大きいためです。あそこで1秒、ここで2秒と実行時間を削減していくうちに寝食を忘れてしまうことも珍しくありません。</p>
<p class="in">特に言語処理系のようなどういうふうに使われるかは前もって予想もできないようなプログラムでは、ありとあらゆる部分がボトルネックになりえます。というわけで、先ほどの鉄則も忘れてむやみやたらといじりまわるわけです。</p>
<p class="in">確かに楽しいですけど、なんか本来の目的を逸脱しているような……。</p>
</section>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-049.xhtml">&lt;&lt; 前ページ</a>　<a href="p-051.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
