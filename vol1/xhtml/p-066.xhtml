<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第30章 ここからのRuby</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 1</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 1</a>　&gt;　<a href="p-065.xhtml">第30章</a>　&gt;　Ruby開発日記</p>
<!-- Body -->
<section id="chap3007" class="level2">
<a id="page_411"/>
<h3>◆ Ruby開発日記 ◆ 言語のユーザビリティ対象となる読者の気持ち</h3>
<hr class="hr-green" />
<p class="in">Jakob Nielsen博士によれば、使いやすさ、「ユーザビリティ」には以下の5つの質的な構成要素があるのだそうです（<span class="link">http://www.usability.gr.jp/alertbox/20030825.html</span>）。</p>
<ul>
<li><p><span class="k">学習容易性</span><br />
初めてそのデザインに触れたユーザーが、どれくらい容易に基本的なタスクを達成できるようになるか?</p></li>
<li><p><span class="k">効率性</span><br />
いったんそのデザインを学習したユーザーが、どれくらい迅速にタスクを達成できるようになるか?</p></li>
<li><p><span class="k">記憶性</span><br />
しばらく使用しない期間をはさんだあと、再びそのデザインに戻ってきたユーザーが、どれくらい容易に習熟度を取り戻すことができるか?</p></li>
<li><p><span class="k">エラー</span><br />
ユーザーが犯すエラーの数、そのエラーの深刻さ、そして、そのエラーからの回復の容易さはどうか?</p></li>
<li><p><span class="k">満足度</span><br />
そのデザインを使うと、どれくらい楽しいか?</p></li>
</ul>
<p class="in">実に興味深いです。世間に存在するツールすべてがこのユーザビリティを念頭において設計されていればどんなによいことでしょう。たとえば、昨年購入したテレビはハードディスク内蔵で機能的には大変満足なのですが、残念ながら使い勝手は今ひとつです。カタログには使い勝手については載ってないんですよねえ。プログラミング言語もツールですから、当然使い勝手があります。上記の要素をプログラミング言語にあてはめるとどうなるでしょう。</p>
<section id="chap30070101" class="level4">
<a id="page_412"/>
<h5>学習容易性</h5>
<p class="in">学習が容易という観点からいうと、プログラミング言語はあまり独創的でないほうが望ましいのかもしれません。プログラマーたるもの、たいてい1つや2つの言語は知っているわけですから、既存の言語の知識が応用できるかどうかは、どれだけ素早く学ぶことができるかに大きく影響すると思います。もっとも、あまりに独自性がないと、その言語の存在価値もなくなってしまうわけですから、バランスが重要です。</p>
</section>
<section id="chap30070102" class="level4">
<h5>効率性</h5>
<p class="in">プログラミング言語の効率は大きく分けると2種類あります。1つはプログラムがどれだけ高速に実行されるかという実行効率、もう1つはその言語で開発するときにどれだけ手早く開発できるかという開発効率です。もちろん両方優れているのに越したことはないのですが、最近のコンピュータの演算速度の進歩を考えると、より注目すべきは開発効率でしょう。</p>
<p class="in">プログラミング言語の開発効率を向上させる方法はいろいろありますが、最も重要な要素は「簡潔性」だと思います。基本的には「簡潔に書けることは善」です。もっとも簡潔にしようとするあまり、病的に読めないプログラムになっては困ります。要するに、プログラマーがコンピュータにやらせたいと思っていることを、余計な指定なしに最少のステップで伝達する、というのが究極の目標でしょう。</p>
</section>
<section id="chap30070103" class="level4">
<h5>記憶性</h5>
<p class="in">これは「学習容易性」と同様に他の言語からの類推ができることが有効だと思います。また、言語そのものが一貫性を持っていると、やはり類推が効いて思い出しやすいと思います。</p>
</section>
<section id="chap30070104" class="level4">
<h5>エラー</h5>
<p class="in">プログラミング上で繰り返してしまう間違いというのはあるものです。私が経験があるのは、たとえばPascalでセミコロンの扱いを間違えるとか、Perlでセミコロンを忘れるとかです。あと、Cで文をブロックで囲むのもよく忘れます。このように頻繁に繰り返されるエラーに注意を払って取り除くことでよい言語を設計することができます。Rubyの場合、改行に意味を持たせてセミコロンの間違いをなくし、文はいつも<code>end</code>で終わるようにして、単文と複文の違いによる文法エラーもなくしています。</p>
</section>
<section id="chap30070105" class="level4">
<h5>満足度</h5>
<p class="in">プログラミング言語の満足度はいろいろな要素で決まるのですが、きびきびプログラミングできる言語は使っていて楽しいものです。楽しいプログラミング、満足できるプログラミングは言語の究極の目標の1つです。プログラミングは本来非常に知的で、創造的で、楽しい活動のはずです。その本来の楽しさを取り返すのに「使いやすい言語」は役立つはずです。</p>
</section>
<section id="chap300702" class="level3">
<h4>使いやすい言語を求めて</h4>
<p class="in">普通の人はプログラミング言語を自分で設計したりはしないもののようなので、世の中に存在する言語の中から「使いやすい」ものを選ぶ必要があります。どんな言語が使いやすいか、あるいはどういう言語に満足するかは人によって違うので、これまでで述べた、5要素を基準にいろいろ探してみるのはどうでしょう。</p>
<a id="page_413"/>
<div class="blockquote">
<p class="ni">え? どんな言語がよいか教えてくれって?　私に聞けば答えはRubyに決まってるでしょう?</p>
</div>
<p class="in">私の知っている範囲でよさそうな言語にはRuby, Python, Lisp, Schemeなどがあります。その他にもあなたにぴったりの言語が見つかるかもしれません。</p>
</section>
<section id="chap300703" class="level3">
<h4>使いやすい言語を作ろう</h4>
<p class="in">世の中にプログラミング言語があふれているとはいえ、自分にぴったりの言語がなければ作るしかありません。私はもっともっと自分のプログラミング言語を設計する人が現れてもよいと思っています。もちろん日本でも言語を設計したことのある人はたくさんいると思います。しかし、それらの多くは純粋に研究のためであったり、ツールの組み込み用であったりで、使い勝手についてはあまり考慮されていないように思います。Rubyももう10歳になります。そろそろRubyを超えるような言語が新たに登場してもよい頃かもしれません。</p>
</section>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-065.xhtml">&lt;&lt; 前ページ</a>　<a href="p-bmatter-001.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
