<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第4章 スクリプト言語の歴史</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 1</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 1</a>　&gt;　第4章</p>
<!-- Body -->
<section id="chap04" class="level1">
<a id="page_053"/>
<span class="chap-title">Matz Essay</span><span class="chap-num">4</span>
<hr class="chap-hr" />
<h2>
<span class="fontsmall">連載 スクリプト言語</span><br />
スクリプト言語の歴史
</h2>
<hr class="chap-hr" />
<p class="right">[<span class="it">bit</span>, 2001年2月号]</p>
<div class="newlead">
<p class="in">私が高校生の頃の憧れの雑誌、『bit』への寄稿です。近所の本屋には置いてなくて、わざわざ取り寄せたのですが、アカデミックな雰囲気の『bit』は当時の私には手に負えなかった記憶があります。その10数年後にはその雑誌に原稿を書くまでになるとは。</p>
<p class="in">この記事では、Rubyの作者という立場を離れて、スクリプト言語全般の流れをまとめています。当然のようにRubyの紹介部分は自画自賛満載ですね。</p>
<p class="in">これは『bit』の「スクリプト言語」特集の連載の一部でした。当時はPerl, Python, Rubyと言った「スクリプト言語」がかなり注目されていたんですね。このすぐあとに、これまでの「スクリプト言語」という概念を置き換えるようなLL（Lightweight Language）という単語も登場して、注目はますます高まります。この記事の中でも、スクリプト言語の未来について予想していますが、「スクリプト言語の適用分野がテキスト処理を超えてますます広がる」という予想は、かなり当たったのではないかと思います。もっとも、JavaScriptを含めたスクリプト言語は、テキスト処理言語というよりもむしろ、Webアプリケーション向け言語と認識される未来は想像を超えましたし、さらにこのジャンルの多くの言語が（PHPやPython, TypeScriptのように）積極的に静的型宣言を受け入れるとはまったく予想できませんでした。</p>
</div>
<section id="chap0401" class="level2">
<h3>スクリプト言語の歴史とは?</h3>
<hr class="hr-gray" />
<p class="in">前回のスクリプト言語座談会<a href="#fn1" class="footnote-ref" id="fnref1" epub:type="noteref" role="doc-noteref">1</a> に参加したいきがかり上、「スクリプト言語の歴史」について記事を書いてほしいとの依頼を受けた。「私は若いから歴史は知りません」と答えたのだが、押し切られてしまった。額に「お人好し」とポストイットが貼ってあるらしい。</p>
<p class="in">引き受けたはいいが、知らないものは本当に知らないのだからしょうがない。ここは、実体験に基づかない、言語オタクの耳学問から歴史を再構成することとしよう。</p>
</section>
<section id="chap0402" class="level2">
<a id="page_054"/>
<h3>スクリプト言語の3世代分類</h3>
<hr class="hr-gray" />
<p class="in">ここで前回の座談会でも紹介した「スクリプト言語の3世代分類」を改めて紹介しておこう。個人的な見解だが、いわゆるスクリプト言語と呼ばれるものは、実は3つの世代に分類できると考えている（<a href="#table0401">表4.1</a>）。</p>
<div class="table" id="table0401">
<p class="tbl-caption">表4.1●スクリプト言語の3世代分類</p>
<table class="tbl01">
<tr>
<td><span class="k">第1世代</span></td>
<td>処理に制御構造を導入するためのもの。アドホックな文法。できないことは外部ツールに任せちゃう。「シェル」「awk」など</td>
</tr>
<tr>
<td><span class="k">第2世代</span></td>
<td>とりあえず、何でも自分でできる程度に機能強化。第1世代のアドホックさを残している。「Perl」</td>
</tr>
<tr>
<td><span class="k">第3世代</span></td>
<td>第2世代を踏まえつつ、もっと「普通」のプログラミング言語になったもの。「Python」「Ruby」</td>
</tr>
</table>
</div>
<p class="in">これはどういうことかと考えるに、おそらく、玩具やツールボックスのたくさんある1つのツールにすぎなかった第1世代のスクリプト言語が、そのよい性質のゆえにだんだんと機能が強化され、普通のプログラミング言語のレベルに（そのよい性質を保ったまま）成長してきた、ということではないかと思う。</p>
<p class="in">そこでスクリプト言語の本質を見極めるためにも、進化論よろしく、スクリプト言語の進化をたどることにしよう。ただし、先にも言い訳したとおり、筆者はこの歴史を体験してはいないので、適当に自分に都合のいいように歴史を再構成していることは了承していただきたい。</p>
</section>
<section id="chap0403" class="level2">
<h3>スクリプト言語の出発点: シェル</h3>
<hr class="hr-gray" />
<p class="in">スクリプト言語にとっての原点となる存在は、やはりシェルだろう。シェルと、それ以前のJCL（job control language）との違いは、きっと「気軽に実行できるかどうか」ではないだろうか。バッチ時代のJCLを気軽に実行できるリッチな人は、あまりたくさんはいなかったのではないだろうか。</p>
<p class="in">もう1つ、シェルのスクリプト言語たる理由は、柔軟なデータ構造の存在ではないかと考えている。といっても、それはシェルの場合、単なる「バイト列のストリーム」なのだが、この単純かつ柔軟なデータ形式が、ツールをつなげたり、データを加工したりするのに大変な威力を発揮したのだ。UNIX使いは今でも日々お世話になっている。</p>
<p class="in">筆者の分類では、シェルは第1世代のスクリプト言語なので、あまり大規模プログラムや、当初の目的を超えた汎用のプログラムを作るような目的には向かない。向かないはずだが不可能ではないので、超巨大なプログラムを書く人も多々いたらしい。私はそんなプログラムにお目にかかりたくはないが、いにしえの超人にはそんなものは屁でもないらしい。</p>
<p class="in">UNIX上のシェルにはsh（いわゆる、Bシェル）とcsh（Cシェル）の双方があるが、個人的にはcshは言語として謎が多すぎると思っている。大概はあとから出たもののほうが優れているのに、これは珍しい例外である。Cシェルの問題については以下のURLを当たられたい。</p>
<ul class="none">
<li><p><span class="link">http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/</span></p></li>
<li><a id="page_055"/><p>日本語訳はこちら</p></li>
<li><p><span class="link">http://www.klab.ee.utsunomiya-u.ac.jp/~hiroki/csh-whynot.euc</span></p></li>
</ul>
<p class="in">これを読むとcshは使いたくなくなるのではないだろうか。少なくとも、私はそうだった。</p>
</section>
<section id="chap0404" class="level2">
<h3>スクリプト言語のもう1つの原点: awk</h3>
<hr class="hr-gray" />
<p class="in">初期のスクリプト言語で重要な位置を占めるものとしては、シェルの他にawkがあげられる。awkほど世代を反映する言語も珍しい。実際あちこちで現役で働いていて、ちょっとしたシェルスクリプトの中にはたいてい、こっそり隠れていたりする。UNIX<ruby>黎明<rt>れいめい</rt></ruby>期（といってもさほど昔ではないが）を経験した人々はPerlよりもついawkを使ってしまったりするらしい。しかし、最近はLinuxのシェルスクリプトなどでは、awkの代わりにPerlが隠れていたりするので、どうも最近の人はawkにあまり遭遇する機会がないらしい。</p>
<p class="in">今、awkはスクリプト言語の歴史的にみて重要な位置を占めていると述べたが、その理由は2つある。1つは、ちょっと複雑なフィルタを書くのに最適な言語であったことである。awkはgrepとsedとCを足して4で割ったような<a href="#fn2" class="footnote-ref" id="fnref2" epub:type="noteref" role="doc-noteref">2</a> 言語であるが、入力を加工して出力するという単一の目的に対して非常に特化している。</p>
<p class="in">もう1つの理由は、awkが「シェルよりもちゃんとした言語」であったことであろう。あとでより詳しく述べるが、スクリプト言語の進化の歴史は「ちゃんとした言語」への進化の道である。awkが「よりちゃんとした言語」であるPerlに主役の座を譲ったのはむしろ歴史的な必然であったのだろう。</p>
</section>
<section id="chap0405" class="level2">
<h3>スクリプト言語の転換点: Perl</h3>
<hr class="hr-gray" />
<p class="in">このようにして発生したと考えられるスクリプト言語の転換点はやはりPerlであろう。Larry WallによるPerlはawkの後継あるいは代替として開発が開始されている。</p>
<div class="blockquote">
<p class="ni">Larryは最初に考えた。「awkを使おう。」しかし困ったことに、当時のawkはファイルから得られた情報を基に、複数のファイルをオープン、クローズすることはできなかった。Larryは、ある目的にしか使えないツールを書きたくなかったので、結果として新しい言語が誕生したのである。</p>
<p class="right">（『プログラミングPerl』8.7節より引用）</p>
</div>
<p class="in">ということは、当時からnawkがあればPerlは発生しなかったということである。</p>
<p class="in">Perlはawkと比較して以下の点で画期的であった。</p>
<div class="description">
<p class="ditem">awkのルールベースのプログラム構造から解放された</p>
<p class="dni">awkは標準入力に対してパターンごとに処理を登録するという、ある種のルールベースのプログラム構造が強要されていた。Perlはそれを捨て、より「普通」のプログラム言語になっている。これは、フィルタ用言語としての役割を捨てることで、結果として言語の適用範囲が広がったと考えられる。</p>
<a id="page_056"/>
<p class="ditem">たくさんの機能を取り込んだ</p>
<p class="dni">Perlは“feeping creaturism”<a href="#fn3" class="footnote-ref" id="fnref3" epub:type="noteref" role="doc-noteref">3</a> とまで呼ばれるほど、インタプリタに機能強化を繰り返した。これは「小さいことはよいことだ」をモットーに、小さいツールを組み合わせるというUNIXの美徳（ツールボックスアプローチ）を捨てることとなった。この考え方はUNIX的ではないが、Emacsのような前例はある。事実なかなか便利なやり方だ。</p>
<p class="ditem">関数、ライブラリのロード、パッケージなどの機能が導入された</p>
<p class="dni">これもまた、より「普通」の言語に近づいたということだが、これにより「スクリプト言語は小さいプログラム用」という前提を捨て、大規模なプログラムにも適用されるようになったと考えられる。もっとも、これらの機能にもかかわらず、Perlの大規模プログラムは多くの場合やはり悲劇のようだ。</p>
</div>
<p class="in">つまり、awkにあったいくつかの前提あるいは思い込み（「特定目的」「単機能ツール」「小規模プログラム向け」）を捨てることにより、Perlは新境地に達したと考えられる。Larry Wallがこれらの点をどれだけ意識したかはともかく、結果としてPerlがこれらのことを捨てたことにより、現在のスクリプト言語があると考えられる。ほぼすべてのオブジェクト指向言語が何らかの形でSmalltalkの影響を受けているように、ほぼすべてのスクリプト言語が何らかの形でPerlの影響を受けているというのは言い過ぎではないと思われる。</p>
<p class="in">Perlは確かに便利だ。UNIXにおけるテキスト処理やシステム管理に必要な機能を不足なく提供していることや、コンパイラ型言語による最高速ではないものの、そこそこ高速な処理などから、それ以前のツール（シェルやawk）はちょっと使う気にならないくらいだ。</p>
<p class="in">しかし一方で、Perlは多くの批判を受ける言語でもある。Perlの困った点は「利用者を迷わせる」ということだ。PerlのモットーであるTMTOWTDI（There’s More Than One Way To Do It — やり方はいくつもある）ということは、それはそれでかまわないのだが「ありそうないくつかのやり方のうち、（諸般の理由により）いくつかは受け付けられない」というのが一番つらい。「記号が多くてぱっと見ただけではプログラムの意味がわからなくなる」のと相まって、Perlのプログラムについては、昨日の自分は別人だと思ってかからねばならない。</p>
<p class="in">これは、Perlが、まだ「普通」の言語から遠かった第1世代スクリプト言語の特徴を引き継いでいるせいではないかと考えられる。また、たび重なる仕様強化で一貫性を失ったのかもしれない。Perlは開発が進むたびに（ある種アドホックに）機能を加えられ、バージョン5においてはとうとうオブジェクト指向機能さえ身につけている。</p>
<p class="in">しかし、この批判の原因はそれだけでなく、Larry Wallの言語仕様に対する考え方が、他の言語設計者と一風変わっていることにあるだろう。彼は自然言語をモデルにしたと述べている。どうも大学時代に言語学を専攻したそうで、そのへんも影響しているのかもしれない。「自然言語の文法はもっと複雑であいまいだが、毎日使うのに不自由はしない」といわれると、一瞬納得しそうになる。が、たとえ納得したとしてもPerlのプログラムを読むのがつらいという事実は少しも変わらないのだった。</p>
</section>
<section id="chap0406" class="level2">
<a id="page_057"/>
<h3>新たな適用分野: Tcl</h3>
<hr class="hr-gray" />
<p class="in">Tclという言語がある。“Tool Command Language”の略だが、たびたびスクリプト言語に分類されているようだ。スクリプト言語という単語は間口が広いので、そう分類することには別に何の問題もない。言語仕様だけを見ると、Tclは第1世代としようか、第2世代にしようか、迷うレベルである。データ型は文字列しかないし、機能もそれほどない。しかし、文法構造は単純だが拡張性があるのでなんとか第2世代にしてもよいか、という感じにとらえている。もともとアプリケーションへの共通組み込み言語として開発されたのだから無理もない。当初の目的には合致しているといえよう。</p>
<p class="in">しかし、Tclの注目すべき点はそこではない。Tk（ToolKitの略らしい）と呼ばれるGUIライブラリである。Tclが今まで生き残っているのも、組み込み言語ではなく、スクリプト言語と呼ばれるのも、みんなこのTkが原因であろう。Tkは当時としては性質のよいGUIライブラリであったが、画期的な点は、インタプリタ型言語と一体になったGUIライブラリがこれほど使いやすいということを世の中に広く知らしめた点である。</p>
<p class="in">もちろん、Lispなどインタプリタのある言語からアクセスできるGUIライブラリは以前からあったのだが、庶民にはやや高根の花という印象があった。Tclは誰にでも簡単に入手できて、「使えるツール」という印象を与えたのが成功の<ruby>秘訣<rt>ひけつ</rt></ruby>だろう。しかし、Tcl以前にもWinterpのような、インタプリタ型言語（Winterpの場合はxlisp）から、GUIライブラリ（Xt）を操作できる処理系はあったのだが、なぜ広まらなかったのだろうか。やはりLispは（かっこが）嫌われるのだろうか。</p>
<p class="in">しかし、考えてみればGUIというのはインタプリタ型処理系に向いた分野である。人間の反応速度はインタプリタで対応できるほど十分に遅いし、しかも、よいインターフェイスの実現にはある程度試行錯誤が要求されるので、手早い開発サイクルが重宝される。一時GUIビルダがもてはやされた時期があったが、インタプリタ言語とGUIライブラリの組み合わせは、WYSIWYG性には劣るかもしれないが、それに勝る開発効率を提供する。</p>
<p class="in">かくしてTkは愛され、さまざまな言語（Perl, Python, Rubyなど）からのインターフェイスが提供されることとなった。TkはいまだにTclと不可分であるにもかかわらず、使いもしないTclインタプリタを一緒にリンクすることになってでも、各言語に対するTkインターフェイスを提供しようという熱意は、Tkに対するあこがれというよりは、Tclに対する不満が原動力になっているような気がする。</p>
<p class="in">Tclは、やはり組み込み言語として作られたがゆえに、特にデータ型が文字列しかない点でどうにも使いにくいからだ。Tclは、一時の勢いは感じられないものの、現在でもファンを維持している。</p>
</section>
<section id="chap0407" class="level2">
<h3>より「普通」の言語に: Python</h3>
<hr class="hr-gray" />
<p class="in">スクリプト言語の進化の方向が「ちゃんとした言語」への進化であるとするならば、Pythonはある意味その究極の位置にいると考えることができる。Pythonは、インタプリタ型、変数・式に型がない、変数宣言がほぼ不要、というスクリプト言語伝統の特徴をかろうじて備えているが、それらを除けば、ほとんど「普通」のプログラミング言語である。PythonはModulaなどに見られるようなモジュールシステムや例外処理機能を備え、オブジェクト指向機能も最初のバージョンから提供している。</p>
<a id="page_058"/>
<p class="in">このような性質は、Lispのような伝統的にはスクリプト言語と見なされないが、インタプリタが主体として提供される言語とまったく差がない。むしろ、制御構造などについてはより近代的（≒最新流行に近い）といえる。</p>
<p class="in">Perlに至るまでのスクリプト言語には、UNIX的というか、C的というか、楽観的で自己責任の原則に従う傾向があるのだが、Pythonの設計思想はなんとなくPascalのような「正しさ」を強調しているような気がする。</p>
<p class="in">Pythonの面白い点は、ブロック構造をインデントによって表現することだ。これはスタイルの多様性を減らす目的があるということだ。むやみに多様性を強調するPerlとは違う道を歩むつもりらしい。他にブロック構造をインデントで表現する言語といえばOccamがある。イギリス出身のOccamといい、スイス出身のPascalといい、オランダ生まれのPythonはヨーロッパ生まれの言語の影響を大きく受けているのだろうか。</p>
<p class="in">Pythonについて、歴史的に重要なのは、スクリプト言語の領域に初めてオブジェクト指向を大々的に取り込んだという点である。Pythonのオブジェクト指向機能は、すべてのデータがインスタンスでない、という若干の制約があるものの、全般としてかなり筋がよい。一説にはPerl 5のオブジェクト指向機能にも影響を与えたのだということだ。Python以後のスクリプト言語と呼ばれるものが、ほとんど例外なくオブジェクト指向機能を備えるのは、多くの場合、直接あるいは間接的にPythonの影響であるといえるのかもしれない。</p>
<p class="in">Pythonは「Perlよりマシな言語」として、現在でも人気上昇中である。特に海外での評判は高く、infoseek.comやyahoo.comで使われていたという話も聞くが、最近はパフォーマンス上の理由からC（またはC++）で置き換えられたらしい。国内では、あとに述べる「ある理由」により、さほど人気は出ていない。</p>
</section>
<section id="chap0408" class="level2">
<h3>オブジェクト指向スクリプト言語: Ruby</h3>
<hr class="hr-gray" />
<p class="in">さて、その「Pythonが人気が出ないある理由」について説明しよう。</p>
<p class="in">それは「Pythonキラー」とでも呼ぶべき言語が存在するからである。プログラミング言語にしては珍しく、日本で設計され、日本から広がり始めたその言語はRubyという名前である。</p>
<p class="in">と、もったいぶって紹介したが、実はRubyは筆者によって開発されたスクリプト言語である。開発者自身による解説などというものは客観性がなく信じるに足らないものであることが多いのだが、この文も例外ではない。以下は眉に唾をつけて読んでいただきたい。そして、Rubyを入手して本当かどうかご自分で確認していただけるとありがたい。</p>
<p class="in">Rubyの開発開始は1993年である。Pythonが1989年、Perlが1980年代半ばであることを考えるとかなり新しい。実際にRubyを作り始めたときには、PerlのこともPythonのことも知っていて、それでもまだ不満に感じた部分があったのが最初のきっかけである。もっとも、作り出した原動力になったのは既存の言語に対する不満というよりも、「自分の言語を作りたい」という創造に対する意欲だったように思う。</p>
<p class="in">Rubyのほうがあとから開発が始まったので、Rubyの仕様にはPerlやPythonに対するアンチテーゼとなる部分が散見される。目指すはBetter Perl Than Perlであり、Better Python Than Pythonである。</p>
<p class="in">これらの言語と比較したRubyの特長は、以下のとおりである。</p>
<div class="description">
<a id="page_059"/>
<p class="ditem">変数に型情報を持たない</p>
<p class="dni">Perlは変数のプリフィックスよって変数のデータ型を指定している（スカラー型、配列型、ハッシュ型、グロブ型）。一方、Rubyも変数名にプリフィックスを使っているが、指定しているのは型ではなく、スコープである。データ型は変数ではなくすべてオブジェクトが持つ。Pythonはこのようなプリフィックスをいっさい持たない。</p>
<p class="ditem">すべてのデータがオブジェクト（インスタンス）</p>
<p class="dni">Perlは、それぞれのデータ型ごとに挙動が異なる。Perl 5以降ではデータに対するリファレンスとして、ある程度統一的に扱えるようになったが、デリファレンス時に悪夢が再現する。</p>
<p class="din">Pythonはすべてのデータはオブジェクトであるが、組み込みのデータ型のほとんどはオブジェクトであっても、クラスのインスタンスでない。このことによってオブジェクトの統一的な扱いができない場合がある。もっとも、Python陣営はこの点を認識していて、未来のバージョンであるPython 3000では、すべてを本物のオブジェクトに統一しようと計画しているらしい。</p>
<p class="din">Rubyは、すでにすべてのデータが本物のオブジェクトである。すべてのオブジェクトは、何らかのクラスに所属するインスタンスであり、すべてのクラスは<code>Object</code>を頂点とするクラス階層を持つ。</p>
<p class="ditem">使える継承機能</p>
<p class="dni">PerlもPythonも、そのオブジェクト指向機能によって多重継承をサポートしている。一方、Rubyは少々意外だが単純継承しかサポートしていない。これはRubyのほうが劣っているというわけではない。PerlやPythonが深さ優先の検索を行う、事実上あまり使いものにならない多重継承を提供しているのに対して、Rubyのほうは単純継承とMix-inと呼ばれる補助的な継承機能を組み合わせることで、実質、多重継承相当の「使える」継承機能を提供している。</p>
<p class="ditem">ほどほどのスクリプト言語らしさ</p>
<p class="dni">ここまで、スクリプト言語の進歩は「普通の言語」への道であり、Pythonに至ってある点まで行き着いたように感じられる。Rubyでは少々スクリプト言語的要素を取り戻している。たとえば、組み込みの正規表現であり、バッククオートによるコマンド出力である。</p>
</div>
<p class="in">筆者は成功していると自画自賛しているが、読者の皆さんはどう感じられるであろうか。</p>
<p class="in">さあ、宣伝はもう十分だろう。次に行こう。</p>
</section>
<section id="chap0409" class="level2">
<h3>スクリプト言語の性質</h3>
<hr class="hr-gray" />
<p class="in">ここまで、スクリプト言語と呼ばれるいくつかの言語をほぼ時系列に眺めてきたわけだが、共通する性質が見出せただろうか。筆者なりにまとめると、以下のようになる。</p>
<div class="description">
<p class="ditem">インタプリタ型</p>
<p class="dni">厳密には、インタプリタであるかコンパイラであるかは、言語の問題ではなく処理系の問題なのだが、変数や式に型がないとか、<code>eval</code>があるなどの動的な性質の多い言語は、インタプリタ向けの仕様といえないことはない。スクリプト言語と呼ばれる言語は例外なく、主要な処理系がインタプリタである。</p>
<a id="page_060"/>
<p class="ditem">テキスト処理</p>
<p class="dni">スクリプト言語の多くは、テキスト処理向けの機能を持つ。たとえば、強力な文字列操作関数や正規表現など。が、これは絶対的な条件ではなく、たくさんの例外がある。</p>
<p class="ditem">高級なデータ構造</p>
<p class="dni">シェルのバイトストリームを高級と呼ぶのは少々はばかられるが、柔軟でありメモリ管理が不要である点から、ここでは高級と分類する。ほとんどのスクリプト言語は、動的で「高級な」データ構造を持つ。たとえば、awkには連想配列があり、データ型として文字列しかもたないTclでも、それをリストや数値として自在に操作できる。</p>
<p class="ditem">外部との積極的な関わり</p>
<p class="dni">個人的に、スクリプト言語の性質としてかなり重要だと思っているのが、この外部との関わりである。たとえば、OSの諸機能を呼び出したり、外部のプロセスと通信したりすることで、システムをつなぐグルー（<ruby>糊<rt>のり</rt></ruby>）の働きを行ったり、システムの一部に取り付いて、システムにプログラマブルな性質を付与したりする働きは、スクリプト言語の重要な役割であろう。</p>
<p class="ditem">イメージ</p>
<p class="dni">なにより重要なのは「スクリプト言語」というイメージだろう。なんとなく、かっこいい感じがしないだろうか。結局、ある言語がスクリプト言語かどうかを決めるのは、設計者がこのはスクリプト言語だというメッセージを言語にどれだけ込めるかに依存するような気さえする。</p>
</div>
</section>
<section id="chap0410" class="level2">
<h3>スクリプト言語でなさそうなもの</h3>
<hr class="hr-gray" />
<p class="in">スクリプト言語と同じような性質を持っていても、必ずしもスクリプト言語と呼ばれないものもある。</p>
<div class="description">
<p class="ditem">Lisp</p>
<p class="dni">Lispはインタプリタが主体となる言語であり、原則的に変数や式に型がなく、動的な性質も持っていて、スクリプト言語として十分な性質を持っているように思われるが、なぜかスクリプト言語とは呼ばれない。GuileやScsh（Scheme Shell）などは結構がんばってると思うのだが、まだ定着しない。</p>
<p class="din">なぜかと考えるに、歴史的に、テキスト処理や外部との関わりの点で弱かったのと、やはりあの大量のかっこが庶民に好かれていないのが原因ではないかと思われる。それと現時点ではスクリプト言語には「新参もの」というイメージがあり、なんだか太古からあるLispはスクリプト言語らしくない気がする。いや、思い込みなのだが、スクリプト言語はイメージなのだ。</p>
<p class="ditem">BASIC</p>
<p class="dni">インタプリタ型の言語といえば、BASICもそうだ。これもまたスクリプト言語と呼ばれないのは、歴史的に、外部との関わりの点とデータ構造が単純すぎる点に問題があったからだろう。庶民的すぎてもスクリプト言語にはならないらしい。現代のBASICではそれらの点はすでに改善されていても、まだイメージはつきまとうものだ。</p>
<p class="ditem">Smalltalk</p>
<p class="dni">SmalltalkもLisp同様だ。フリーの処理系が長らくなかったことも影響しているかもしれない。</p>
</div>
</section>
<section id="chap0411" class="level2">
<a id="page_061"/>
<h3>傍流スクリプト言語</h3>
<hr class="hr-gray" />
<p class="in">ここまでが、「私の考えるスクリプト言語」である。</p>
<p class="in">しかし、先月号の座談会を見てもわかるとおり、違う見解を持つ人も多いらしい。たとえば、JavaScriptやVBScriptのようなものもスクリプト言語と呼ばれる。これは上記のスクリプト言語の性質のうち、多くを満たしていないが、インタプリタ型であり、外部（この場合はブラウザなど）と積極的に関わろうというという点は満たしている。そしてなにより名前がスクリプト言語であると主張している。</p>
<p class="in">これらの言語はテキスト処理などを主眼とした旧来のスクリプト言語とは毛色は違っているが、スクリプト言語の今後の主流になるかもしれない。しかし、これらの言語には、拡張性などの点で、できればもうちょっと「普通の言語」らしくなってほしいものだ。</p>
</section>
<section id="chap0412" class="level2">
<h3>スクリプト言語の未来</h3>
<hr class="hr-gray" />
<p class="in">結論として、スクリプト言語の未来を予想してと思ったのだが、まったく想像力が働かない。現状で満足してしまっているのだろうか。人間の中身はそれほど速くは進化しないので、未来の言語の言語もやはり今と大差ないような気がする。ただ、スクリプト言語のイメージはこれまでも変わってきたように今後も変わるだろう。適用分野も現在のテキスト処理中心からあらゆる分野に進出するのではないだろうか。</p>
<p class="in">望むのは「手軽なプログラミング」が行える言語が広まって、どこでも自由にプログラミングが行える未来だ。そんなプログラマー天国が実現するのだろうか。するといいなあ。</p>
</section>
</section>
<section id="footnotes" class="footnotes footnotes-end-of-document" epub:type="footnotes">
<hr />
<ol>
<li epub:type="footnote" id="fn1">
<p>編集部注: 『bit』2001年1月号。「連載 スクリプト言語第1回【座談会】スクリプト言語とは」のこと。
<a href="#fnref1" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
<li epub:type="footnote" id="fn2">
<p>「3で割る」ではなく「4で割る」のは、awkの仕様はかなり小さめなので、3で割っては大きすぎるから。
<a href="#fnref2" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
<li epub:type="footnote" id="fn3">
<p>“creeping featurism”のもじり。放っておくとどんどん機能が増殖することを正当化する言葉。
<a href="#fnref3" class="footnote-back" role="doc-backlink">↑</a></p>
</li>
</ol>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-004.xhtml">&lt;&lt; 前ページ</a>　<a href="p-006.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
