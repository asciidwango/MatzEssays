<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第18章 ファイル処理</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 1</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 1</a>　&gt;　<a href="p-041.xhtml">第18章</a>　&gt;　Ruby開発日記</p>
<!-- Body -->
<section id="chap1811" class="level2">
<a id="page_275"/>
<h3>◆ Ruby開発日記 ◆ 顔じゃないよ、心だよ</h3>
<hr class="hr-green" />
<p class="ih">「人間、顔じゃない」とはよくいわれることです。私自身も外見ばかり気にして、中身を大切にしない人を見ると、そんなことでどうするの、などとおせっかいに心配してしまいます。確かに人間にとって一番重要なことは外見ではありません。人間の価値は中身、つまりどのような精神（こころ）を持っているかによって決まるのではないでしょうか。</p>
<p class="in">では、ソフトウェアはどうなのでしょう。</p>
<p class="in">ソフトウェアの外見といえば、インターフェイス部分でしょうか。これは人間の外見よりももっと重要な位置を占めるような気がしてきます。というのも、インターフェイスは人間とコンピュータが直接やりとりする部分ですから、ソフトウェアひいてはコンピュータがあくまでも人間の司令を受けて動作するものである以上、それはかなり重要な位置を占めると考えられます。</p>
<p class="in">ソフトウェアの外見がインターフェイスだとするならば、中身はなんなのでしょう。</p>
<p class="in">それは、やっぱり機能、つまりそのソフトウェアが何ができるかではないでしょうか。たとえばワープロならどれだけ機能があるか、どんな修飾ができるか、どんなすばらしいデザインを表現できるか、というのが中身に当たるのではないでしょうか。</p>
<p class="in">しかし、最近のソフトウェアには使いもしない機能がてんこ盛りのものも少なくないように感じます。いつか使う「かもしれない」機能、誰かは使っている「かもしれない」機能でも、普段の私には不要な機能というものが多い気がします。</p>
<p class="in">ということを考えるとソフトウェアにとっては重要なのは中身よりもむしろ外見であるという結論が引き出せそうな気がします。もちろん、最低限の機能を満たしていなければなりませんが、それさえ満たせば外見こそが最も重要な要素ということです。</p>
<p class="in">では、私の得意な分野であるプログラミング言語はどうなのでしょう。プログラミング言語もソフトウェアである以上、やはり外見の方が大事という性質があるのでしょうか。</p>
<p class="in">実は、そうなのです。いや、実際のところ言語の場合、他のソフトウェアよりもさらに外見が重要であるといえると思います。</p>
<p class="in">いくつかのプログラミング言語をご存じの方ならばお気づきでしょうが、ほとんどのプログラミング言語の「できること」のレベルにはそれほど差がありません。もちろん、論理型言語のPrologや関数型言語のMLやHaskellのように根本となる考え方（パラダイム）から違うものは別ですが、それ以外のものの違いといえば、極端な話、単に文法や記法のような外見の違いであると言い切ることもできるでしょう。</p>
<p class="in">実際にGNUのコンパイラであるGCCは、もともとは単なるCコンパイラでしたが、バージョンが進むにつれ文法を解釈するフロントエンドと実際に機械語を生成するバックエンドとの分離が徹底され、今ではC, C++だけでなく、Ada, Pascal, FORTRANなどなどの言語のコンパイルができるようになりました。近日中にCOBOLのフロントエンドも完成するとのことです。ですから、以前gccはGNU C Compilerの略でしたが、もはやC Compilerではないので、正式にはGNU Compiler Collectionの略称だということになったのだそうです。</p>
<a id="page_276"/>
<p class="in">なお、余談ですがGCCのCOBOLのフロントエンドを作っているのは、私の会社のメンバーです。実は会社の業務でCOBOLコンパイラが必要になったのですが、オープンソースなCOBOLコンパイラがなかったので自分たちで作ることにしたのです。</p>
<p class="in">そういえばマイクロソフトの .NETも言語を超えた共通の実行系CRL（Common Runtime Library）を提供していますね。これもVBやC#を始めとする複数の言語を共通の中間言語（IL）に変換することを実現しています。言語を超えてもできることは本質的に同じというわけです。</p>
<p class="in">このように、新しい環境によってどの言語でもできることが大差なくなってくると、どの言語を選ぶかどうかの決め手は以前とは変化してくると思います。いや、変化するというよりも、以前からそれが決め手だったのですが、新しい環境により、もっと明確に意識されるようになったのでしょう。</p>
<p class="in">私は長い間プログラミング言語おたくを続けてきて、その中で「生き残る言語」の性質を知りたいと考えていました。技術的に優れた言語が消えていったり、問題のある言語が悪口をいわれながら栄えたりするのはなぜだろうと考えていました。そして、最近になってようやっと得られた結論はこれです。</p>
<ul>
<li><p>外見のよい言語が生き残る</p></li>
<li><p>資産のある言語が生き続ける</p></li>
</ul>
<p class="in">FORTRANの外見が?　と思う人もいるでしょうが、その言語の登場したタイミングを考慮しなければなりません。FORTRANの誕生した1950年代には「人間に読めるプログラミング言語」は最高にかっこよかったのです。私の生まれる前だから知らないけど、たぶん。</p>
<p class="in">そして、最初の生存競争を生き残った言語のうち十分に資産を蓄積した言語が生き続けるのです。FORTRANやCOBOLは十分資産を蓄えたので、まだ現役です。PL/Iはちょっと資産が足りなかったようです。</p>
<p class="in">さて、われらがRubyはどうやら一番最初の生存競争を生き延びつつあるようです。Rubyの開発を始めた1993年にはこんなにたくさんの人が使うようになるとは考えていませんでした。正直なところ、現れては消えていく数多くの言語の仲間入りする可能性はかなり高いと作者でさえ考えていたのです。</p>
<p class="in">しかし、「私好みの言語」をよいと思ってくださる方は予想以上に多く、意外にたくさんの人がRubyを受け入れてくださいました。今では日本語で20冊、英語で6冊、ドイツ語で3冊、フランス語で1冊のRuby関連書籍が発行されています。近々ロシア語も書籍も登場するそうです。</p>
<p class="in">これもひとえにRubyがかっこよかったからです。外見の勝利です。人間は顔じゃないけど、プログラミング言語は顔だったんですね。</p>
<p class="in">ただ、ソフトウェアだって言語だって、かっこばかりで中身が全然なくっちゃ話になりません。中身が伴って外見もよくなくちゃいけないって意味では人間とそう違いはないかもしれませんねえ。</p>
<section id="chap181101" class="level3">
<h4>まとめ</h4>
<ul>
<li><p>人間は中身が大事</p></li>
<li><p>でも、ソフトウェアは外見が大事</p></li>
<li><p>プログラミング言語は外見がすべて</p></li>
<li><p>かっこいい言語を使おう</p></li>
</ul>
</section>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-041.xhtml">&lt;&lt; 前ページ</a>　<a href="p-043.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
