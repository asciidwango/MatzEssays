<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
 xmlns="http://www.w3.org/1999/xhtml"
 xmlns:epub="http://www.idpf.org/2007/ops"
 xml:lang="ja"
 class="hltr"
>
<head>
<meta charset="UTF-8"/>
<title>第30章 ここからのRuby</title>
<link rel="stylesheet" type="text/css" href="../../style/book-style.css"/>
</head>
<body epub:type="bodymatter">
<!-- Navigation -->
<h1>Matz Essays Volume 1</h1>
<p class="navigation-top"><a href="../../index.xhtml">HOME</a>　&gt;　<a href="../index.xhtml">Volume 1</a>　&gt;　第30章</p>
<!-- Body -->
<section id="chap30" class="level1">
<a id="page_403"/>
<span class="chap-title">Matz Essay</span><span class="chap-num">30</span>
<hr class="chap-hr" />
<h2>
<span class="fontsmall">初等Ruby講座</span><br />
最終回: ここからのRuby
</h2>
<hr class="chap-hr" />
<p class="right">[<span class="it">Linux magazine</span>, 2003年11月号]</p>
<div class="newlead">
<p class="ih">「初等Ruby講座」連載の最終回です。「ここからのRuby」というタイトルで、入門が終わった人がRubyを使って今後何にチャレンジするかということについて解説しています。ここでWebが強調されないのが2003年という感じですね。「Rubyと言えばWeb」というイメージがありますが、そのイメージを生み出したRuby on Railsが誕生したのは2004年です。私自身がWebが得意でないことも反映していると思います。</p>
<p class="in">あと、プログラミング言語の解説でつまづきがちな変数の認識の仕方としての「箱モデル」と「名札モデル」についても解説しています。言語によっても向いたモデルが異なるのが難しいところですね。</p>
<p class="ih">「Ruby開発日記」では、ユーザビリティ原則からプログラミング言語の設計について考えています。「もうRubyも10歳だし、そろそろ超えるような言語が（日本から）出てもよい頃だ」と書いていますが、20年経ってもRubyを超える言語が日本から出てくる気配がありません。さみしい。日本人はいろいろ恵まれていると思うのですが、言語をデザインしたいという「人種」は私が思う以上に希少なようです。</p>
</div>
<div class="lead">
<p class="ni">さて、長らく連載してきた『初等Ruby講座』もとうとう今回で最終回です。「私に入門は無理じゃないか」という不安を振り切っての連載でしたが、案の定少々難しすぎたように思います。今回は最終回に当たって過去を振り返り、それからRubyとともに歩む未来を見つめます。</p>
</div>
<section id="chap3001" class="level2">
<h3>対象となる読者の気持ち</h3>
<hr class="hr-gray" />
<p class="in">入門記事を書くに当たって一番難しいのは、読者の気持ちを理解することです。以前別のところでも書きましたが、解説記事を書けるほど知識を持った人は、何もわからなかった初心者のときの気持ちを忘れているものです。説明するのに必要な知識を得る過程で失っていくものもあるんですね。</p>
<a id="page_404"/>
<p class="in">ご多分に漏れず、私も初心者のときの気持ちを忘れてしまっています。私がプログラミングを始めたのはもう20年以上昔ですから、記憶があいまいなのもしかたないかもしれません。</p>
<p class="in">最近、Rubyのメーリングリストで「変数のたとえ話」について議論が行われました。これはつまり、初心者向けの本の中で変数について説明するときにどのようなたとえを使うのが望ましいか、というものです。</p>
<p class="in">議論と発端となったのは、ある本で「変数はオブジェクトが入る箱のようなもの」という説明がしてあったことにあります（<a href="#fig3001">図30.1</a>）。</p>
<div class="fig" id="fig3001">
  <!-- <div class="image35"> -->
  <div class="image300">
      <img src="../image/ch30/30-1.jpg" alt="fig3001" />
  </div>
  <p class="fig-caption">図30.1●変数は箱</p>
</div>
<p class="in">箱にはそれぞれ名前が書いてあって、それが変数名になるわけですね。しかし、Rubyでは複数の変数が1つのオブジェクトを「格納する」ことがあります。</p>
<div class="plist">
<pre>a = <span class="str">&quot;abc&quot;</span>
b = a       <span class="cmt"># a とb は同じオブジェクト</span>
a[0] = <span class="str">&quot;A&quot;</span>  <span class="cmt"># a を&quot;Abc&quot;に変えると</span>
puts b      <span class="cmt"># b も変わる</span></pre>
</div>
<p class="in">現実世界ではある「モノ」が2つの箱に同時に入ることはありえませんから、このたとえは割と早い時点で破綻しそうです。</p>
<p class="in">このたとえは変数を箱だと考えるものですから「変数=箱モデル」、略して「箱モデル」と呼びましょう。</p>
<p class="in">一方、私が出した本、（『オブジェクト指向スクリプト言語Ruby』）を含めてRubyの解説書の多くで使われているのが「変数は名札のようなもの」というたとえです（<a href="#fig3002">図30.2</a>）。</p>
<div class="fig" id="fig3002">
  <!-- <div class="image40"> -->
  <div class="image300">
      <img src="../image/ch30/30-2.jpg" alt="fig3002" />
  </div>
  <p class="fig-caption">図30.2●変数は名札</p>
</div>
<p class="in">これを「変数=名札モデル」略して「名札モデル」と呼びましょう。1つの「モノ」に複数の名札を付けるのはめったにないことですが、箱と違って超現実的というわけではありません。</p>
<p class="in">このように、名札モデルはRubyの変数の振る舞いをより自然に説明しますから、Rubyだけを考えるなら名札モデルのほうが優れていると考えることができます。</p>
<p class="in">ところが、ことはそれほど単純ではないのです。Rubyにだけ関していえば確かに「名札モデル」のほうが優れているかもしれませんが、プログラミング言語一般として考えると箱モデルのほうがふさわしい場合もありえます。</p>
<p class="in">たとえばC言語を考えると、Cでは、</p>
<a id="page_405"/>
<ul>
<li><p>変数の実体は値を入れる入れ物である</p></li>
<li><p>代入は入れ物の中身をコピーすることである</p></li>
<li><p>その入れ物はオブジェクトそのものである</p></li>
</ul>
<p class="ni">という性質があります。</p>
<p class="in">ということは「箱モデル」の説明のほうがしっくりくるわけです。仮に初心者がCのような言語に関してはひととおりの知識があるのであれば、むしろ箱モデルのほうがわかりやすい場合も考えられます。</p>
<p class="in">Cと箱モデルは非常に相性がよく、変数は値の入る箱であると考えてまず間違いありません。C言語では代入によって箱の中身（値）がコピーされます。また箱には名前の他に番地が付いていて、番地を経由してアクセスできます。変数名の前に「<code>&amp;</code>」演算子を付けるとその変数の番地を得ることができます。</p>
<p class="in">C言語の変数は「別の箱を指す番地が書いた紙の入った箱」と表現できます。代入では箱の中身である番地（を書いた紙）がコピーされて指されている箱には変化がありません（<a href="#fig3003">図30.3</a>）。</p>
<div class="fig" id="fig3003">
  <!-- <div class="image50"> -->
  <div class="image450">
      <img src="../image/ch30/30-3.jpg" alt="fig3003" />
  </div>
  <p class="fig-caption">図30.3●Cのポインタ変数を箱モデル</p>
</div>
<p class="in">このように「わかりやすいたとえ」を考えただけでも、前提や対象者によってさまざまな条件が絡み合い難しいものです。入門あなどるなかれ。</p>
</section>
<section id="chap3002" class="level2">
<h3>初等講座を振り返る</h3>
<hr class="hr-gray" />
<p class="in">この『Ruby初等講座』は今回が25回目、つまりもう2年以上も連載してきたことになります。「初等」なんてタイトルを付けちゃったばかりに苦労しました。必ずしもうまくいったという自信はないのですが、ここではこの2年の軌跡をたどってみましょう。</p>
<p class="in">過去の連載の内容を<a href="#table3001">表30.1</a>に示します。</p>
<a id="page_406"/>
<div class="table" id="table3001">
<p class="tbl-caption">表30.1●『Ruby初等講座』連載目次</p>
<table class="tbl11">
<tr>
<th><span class="k">回数</span></th>
<th><span class="k">題名</span></th>
<th><span class="k">知られざるRuby</span></th>
<th><span class="k">Ruby開発日記</span></th>
</tr>
<tr>
<td>第1回<br />2001年11月号</td>
<td>はじめの一歩</td>
<td>open</td>
<td>デンマーク訪問記</td>
</tr>
<tr>
<td>第2回<br />2001年12月号</td>
<td>条件判断とループ</td>
<td>end</td>
<td>Linux Conference 2001</td>
</tr>
<tr>
<td>第3回<br />2002年1月号</td>
<td>オブジェクトと変数</td>
<td>変数</td>
<td>Ruby Conference 2001 + OOPSLA</td>
</tr>
<tr>
<td>第4回<br />2002年2月号</td>
<td>配列</td>
<td>ソート</td>
<td>Ruby 1.8</td>
</tr>
<tr>
<td>第5回<br />2002年3月号</td>
<td>ハッシュ</td>
<td>ハッシュアルゴリズム</td>
<td>オープンソースな生活</td>
</tr>
<tr>
<td>第6回<br />2002年4月号</td>
<td>文字列の操作</td>
<td>packとunpack</td>
<td>国際感覚</td>
</tr>
<tr>
<td>第7回<br />2002年5月号</td>
<td>パターンマッチ</td>
<td>文字コード</td>
<td>Riteと鬼車</td>
</tr>
<tr>
<td>第8回<br />2002年6月号</td>
<td>入出力</td>
<td>—</td>
<td>stdioの憂鬱</td>
</tr>
<tr>
<td>第9回<br />2002年7月号</td>
<td>数と電卓</td>
<td>coerce</td>
<td>インプットメソッド</td>
</tr>
<tr>
<td>第10回<br />2002年8月号</td>
<td>CGI（その1）</td>
<td>Web セキュリティ</td>
<td>若い世代への憂慮あるいは杞憂</td>
</tr>
<tr>
<td>第11回<br />2002年9月号</td>
<td>CGI（その2）</td>
<td>—</td>
<td>フリーソフトウェアな生活</td>
</tr>
<tr>
<td>第12回<br />2002年10月号</td>
<td>CGIの道具箱</td>
<td>—</td>
<td>時代はLispに追いついたか</td>
</tr>
<tr>
<td>第13回<br />2002年11月号</td>
<td>ファイル処理</td>
<td>—</td>
<td>顔じゃないよ、心だよ</td>
</tr>
<tr>
<td>第14回<br />2002年12月号</td>
<td>ネットワークプログラミング</td>
<td>—</td>
<td>予想外</td>
</tr>
<tr>
<td>第15回<br />2003年1月号</td>
<td colspan="3">番外編 Rubyカンファレンス2002リポート</td>
</tr>
<tr>
<td>第16回<br />2003年2月号</td>
<td>プロセスとフォーク</td>
<td>Rubyソースコード完全解説</td>
<td>大人になる、ということ</td>
</tr>
<tr>
<td>第17回<br />2003年3月号</td>
<td>スレッド（その1）</td>
<td>—</td>
<td>スピード狂</td>
</tr>
<tr>
<td>第18回<br />2003年4月号</td>
<td>スレッド（その2）</td>
<td>—</td>
<td>プログラマーの幸せ</td>
</tr>
<tr>
<td>第19回<br />2003年5月号</td>
<td>データの保存</td>
<td>—</td>
<td>プログラマーと数学</td>
</tr>
<tr>
<td>第20回<br />2003年6月号</td>
<td>XMLとYAML</td>
<td>—</td>
<td>迷惑メールをやっつけろ</td>
</tr>
<tr>
<td>第21回<br />2003年7月号</td>
<td>XMLとYAML（その2）</td>
<td>—</td>
<td>うぇぶ日記はじめました。</td>
</tr>
<tr>
<td>第22回<br />2003年8月号</td>
<td>エクストリーム・プログラミング</td>
<td>—</td>
<td>10年後の技術者</td>
</tr>
<tr>
<td>第23回<br />2003年9月号</td>
<td>独習Ruby</td>
<td>—</td>
<td>オープンソースコンベンション2003</td>
</tr>
<tr>
<td>第24回<br />2003年10月号</td>
<td>再入門オブジェクト指向</td>
<td>—</td>
<td>LL Saturday</td>
</tr>
<tr>
<td>第25回<br />2003年11月号</td>
<td>これからのRuby</td>
<td>—</td>
<td>言語のユーザビリティ</td>
</tr>
</table>
</div>
<p class="in">こうして振り返ってみると、いろいろ苦労したことが思い出されます。</p>
<p class="in">この連載の前半では「知られざるRuby」というちょっと高度なコーナーが存在していました。ドキュメントにも書いていないような細かいところを解説するコーナーで書いてる本人も結構面白かったのですが、ソースコードを読みながらRubyの隅っこの部分の挙動を解説する作業は結構手間がかかりますし、なにより原稿を書いてる最中にRubyのデバッグや修正に熱中してしまったりと思わぬ展開になることもしばしばでした。</p>
<p class="in">ただ単に解説を書くよりも大変手間がかかってしまうことと、入門のほうが回数を進めるうちにだんだんと高度になってきた関係もあってこれはいつの間にかなくなってしまいました。</p>
<p class="ih">「知られざるRuby」コーナーがなくなったのとほぼ同時期に、解説するテーマもRuby言語そのものから応用分野の方向へと話題が移ってきました。たとえばCGIとかXMLとかです。</p>
<p class="in">Ruby言語そのものについてはたくさん本も出ていますから、実際にRubyを使いたい人には、こちらの応用のほうが役に立ったかもしれません。</p>
<p class="in">このあたりは他にはない解説だと自画自賛しているのですが、今改めて原稿を読み返してみるとちょっと実例が少ないかもしれませんね。あまり「初等」ではなかったかなあ。</p>
<p class="in">この連載では毎月最後の1ページを使って「Ruby開発日記」というコラムを掲載してきました。これはRuby開発者である私の開発生活の一部を切り取ったような「無駄話」を毎月書いてきました。出席したカンファレンスのことや、Rubyの開発状況、オープンソースデベロッパーを取り巻く状況などについてが主な話題でしたね。</p>
<a id="page_407"/>
<p class="in">また、プログラマーという人種の生態について書いたこともありました（<a href="p-022.xhtml#chap11">2002年4月号</a>、<a href="p-034.xhtml#chap15">2002年8月号</a>など）。「プログラマーも人間だ、ちょっと変わってるかもしれないけど」ということが伝わりましたでしょうか。</p>
<p class="in">本編よりもこちらのほうが面白いという意見もあったようです。せっかくなのでこういう試みはこれからも続けていきたいと思います。</p>
</section>
<section id="chap3003" class="level2">
<h3>これからのRuby</h3>
<hr class="hr-gray" />
<p class="ih">「これからRubyがどうなるか」ではなく、読者の皆さんが『初等Ruby講座』で学んだあと、「これからRubyで何をするか」という話です。</p>
<p class="in">Rubyというプログラミング言語がありました。ひととおりいろんなことができることはわかりました。では、それを使って何をしましょう?</p>
<p class="in">以前、地方紙のインタビューを受けたときにコンピュータのことにあまり詳しくない記者の方に「で、そのRubyというソフトはどんなことができるんですか」と質問されて、大変困ったことがあります。</p>
<p class="in">プログラミング言語ってのは、何をプログラミングするかで、できることが決まるわけですから。「プログラムできます」と答えてもわかってもらえないでしょうし。悩んだ挙げ句「何でもできます」などとわかったようなわからないような答えを出したんですが、記者の方はなんだか不思議そうな顔をしていました。</p>
<p class="in">Rubyで何ができるかを決めるのは、Rubyを使う人一人一人です。Rubyはプログラムされた命令に従って、何でも実行します。あなたは何を命令しますか?</p>
<p class="in">Rubyの使い方として、典型的なものの1つとして考えられるのは簡単なテキスト処理でしょう。</p>
<p class="in">先日、スパムフィルタによって分類されたメールフォルダ（mbox形式）のメールのサブジェクトから、フィルタによって付けられた「***** SPAM *****」という文字列を削りたいと思いました。sedとかでも簡単な処理でしょうが、あいにく私はsedを使いこなせるほど知りません。そこでRubyの出番です。</p>
<div class="borderterminal">
<pre>% ruby -i~ -pe 'sub(/\*{5} SPAM \*{5}/, "")' mbox</pre>
</div>
<p class="in">これだけで<code>mbox</code>というメールフォルダの置き換えが行われます。修正前のフォルダは<code>mbox</code>という名前で残されます。このプログラムでは「<code>***** SPAM *****</code>」という文字列すべてを置換してしまいます。気になる場合には、</p>
<div class="plist">
<pre><span class="mcm">/^Subject: \*{5} SPAM \*{5} /</span></pre>
</div>
<p class="ni">という正規表現にしたほうがよいのかもしれません。まあ、簡単な処理ですから、そこまで厳密にする必要はないでしょうが。</p>
</section>
<section id="chap3004" class="level2">
<a id="page_408"/>
<h3>日常生活に役立てる</h3>
<hr class="hr-gray" />
<p class="ih">「Rubyをいかに使うか」という問いへの答えの参考にするため、私が日常的に使っているRubyスクリプトの中からいくつかを紹介しましょう。</p>
<p class="in">まず最初にご紹介するのは「文字重複チェックプログラム」です（<a href="#list3001">リスト30.1</a>）。</p>
<div class="plistc" id="list3001">
<p class="lst-caption">リスト30.1●文字重複チェックプログラム</p>
<pre>ARGF.each <span class="kwd">do</span> |line|
  print ARGF.file.path, <span class="str">&quot; &quot;</span>, ARGF.file.lineno, <span class="str">&quot;:&quot;</span>, line if line.gsub!(<span class="mcm">/([あ-ん])\1/</span>e, <span class="str">&#39;[[&amp;]]&#39;</span>)
<span class="kwd">end</span></pre>
<hr class="hr-gray" />
</div>
<p class="in">私はここのところ原稿を書いたりドキュメントを書いたりする仕事が多いのですが、その中で一番よくある間違いが文字（特に助詞）の二重打ちです。</p>
<p class="in">原稿を書いていく過程で、たとえばこんな文章を書いたとします。</p>
<div class="plist">
<pre>よくあるエラーが、文字の二重打ちです</pre>
</div>
<p class="in">この中にある「エラー」の部分を「間違い」に訂正しようとして、「エラー」を消し、勢いで「間違いが」と打ってしまったとします。結果は、</p>
<div class="plist">
<pre>よくある間違いがが、文字の二重打ちです</pre>
</div>
<p class="ni">となります。</p>
<p class="in">こういうエラーをチェックするのが文字重複チェックスクリプトです。このスクリプトを使うと同じひらがなが連続している部分を表示してくれます（<a href="#fig3004">図30.4</a>）。</p>
<div class="figconsole" id="fig3004">
<div class="borderconsole">
<pre>genko.txt 257:Ruby というプログラミング言語がありました。ひ[[とと]]おり
genko.txt 341:私は[[ここ]]のところ原稿を書いたりドキュメントを書いた
genko.txt 352: よくある間違い[[がが]]文字の二重打ちです</pre>
</div>
<p class="fig-caption">図30.4●文字二重打ちチェック</p>
</div>
<p class="ih">「ひととおり」とか「ここのところ」とか問題ないものも検出していますが、恥ずかしい間違いを見逃すよりはよいでしょう。私は原稿を提出する前にこのスクリプトにかけることにしています。</p>
<p class="in">さて、原稿を書くときのための「文字重複チェックプログラム」ですが、本業のプログラム書きでも小さなプログラムが活躍します。プログラムの規模はよくステップ数と呼ばれる単位で数えます。これは基本的には行数なのですが、コメントや空行の数を除きます。<a href="#list3002">リスト30.2</a>はこの処理を行ってくれるプログラムです。</p>
<a id="page_409"/>
<div class="plistc" id="list3002">
<p class="lst-caption">リスト30.2●ステップカウントプログラム</p>
<pre><span class="cmt">#! /usr/bin/ruby</span>

n = 0
open = <span class="kwd">false</span>
<span class="kwd">while</span> line = gets()
  line.gsub! <span class="mcm">%r|//.*|</span>, <span class="str">&#39;&#39;</span>
  line.gsub! <span class="mcm">%r|/\*.*\*/|</span>, <span class="str">&#39;&#39;</span>
  <span class="kwd">if</span> <span class="mcm">%r|/\*|</span>                  <span class="cmt"># open comment</span>
    line.gsub! <span class="mcm">%r|/\*.*|</span>, <span class="str">&#39;&#39;</span>
    open = <span class="kwd">true</span>
  <span class="kwd">end</span>
  <span class="kwd">unless</span> <span class="mcm">/^\s*$/</span> =~ line
    n += 1
  <span class="kwd">end</span>
  <span class="kwd">if</span> open
    <span class="kwd">until</span> <span class="mcm">%r|\*/|</span> =~ line
      line = gets()
    <span class="kwd">end</span>
    line.sub! <span class="mcm">%r|.*\*/|</span>, <span class="str">&#39;&#39;</span>
    open = <span class="kwd">false</span>
    <span class="kwd">redo</span>
  <span class="kwd">end</span>
<span class="kwd">end</span>
p n</pre>
<hr class="hr-gray" />
</div>
<p class="in">このプログラムは、空白のみの行、コメント行を除いた行数をカウントします。Cのコメントは複数行にわたることがあるので、少々工夫してあります。</p>
<p class="in">たとえば原稿執筆時点で最新のRubyのソースコードは全部で72830行あります。しかし、このプログラムを使って空白行とコメントを取り除くと、実質は62283行であることがわかります。実に1万行以上空白とコメントがあるのですね。</p>
<p class="in">これらはほんの一例にすぎません。原理的にはRubyは「何でもできる」のですから、限界はプログラマーの想像力です。どんなことができる便利になるでしょうか。あなたならRubyに何をさせますか?</p>
</section>
<section id="chap3005" class="level2">
<h3>プログラムできる喜び</h3>
<hr class="hr-gray" />
<p class="in">パーソナルコンピュータがまだ「マイコン」と呼ばれていた頃、コンピュータを使うことはプログラムすることとほぼ同じ意味でした。まだまだ未熟なマイコンは、何かしたいと思えばBASICなどを使ってプログラムしてやらなければ何もできなかったものです。私がコンピュータに初めて触れたのはそういう時代でした。それはPC-1210というシャープのポケットコンピュータで、電卓サイズにBASICを積んだ当時としては画期的なものでした。</p>
<a id="page_410"/>
<p class="in">そしていわゆるパソコン、それからワークステーションと、時代につれて使うコンピュータは進歩してきました。今では以前ワークステーションと呼ばれていたコンピュータよりもはるかに性能の高いパソコンが皆さんの机の上に乗っています。</p>
<p class="in">ところがコンピュータが進歩した現在、コンピュータユーザーでプログラムする人はすっかり減ってしまいました。今や、コンピュータを使うということは、たいていはどこかの誰かが作ったプログラムを使うだけという意味になってしまいました。</p>
<p class="in">現在、ほとんどの人にとっては、コンピュータというものは、単にインターネットブラウザやメールリーダー、ワープロなどの出来合いのアプリケーションを動かすための機械になってしまいました。</p>
<p class="in">そもそもコンピュータを買ってきても、プログラミングできるツールは付いてきませんし。</p>
<p class="in">私たち古い世代はコンピュータに興味を持つと同時に、自然にプログラミングを始めたわけですが、今の若い人たちはいったいどういうふうに感じているのでしょうか。最初に使うアプリケーションがいきなりインターネットエクスプローラのような大規模で完成度が高いソフトウェアだったりした日には、ちょっと自分でやってみようという気持ちにならないんじゃないでしょうか。</p>
<p class="in">それはコンピュータが成熟したという意味でもありますが、以前よりずっと性能が高くなって、いろいろなことができるようになったはずのコンピュータなのに、アプリケーションとしてあらかじめ用意された機能を、用意されたとおりに使うしかない現状は融通が利かないと感じることもあります。</p>
<p class="in">Rubyやその仲間のプログラミング言語は、そのような融通の利かなさを打破して、再びプログラムできる喜びを取り返すのに役立ちます。自分でコンピュータの動きを自由にプログラムできるのはなんとすばらしいことでしょう。失われていた自由を再び得たような気分です。</p>
<p class="in">たとえば、</p>
<ul class="none">
<li><p>メールサーバーにたまったSobig.Fのウィルスメールを一気に削除したい?<br />
Rubyならできます。</p>
<ul class="none">
<li><p><span class="link">http://amrita.s14.xrea.com/d/?date=20030905</span></p></li>
</ul></li>
<li><p>Web日記を始めて、自分向けにカスタマイズしたい?<br />
Rubyならできます。</p>
<ul class="none">
<li><p><span class="link">http://www.tdiary.org/</span></p></li>
</ul></li>
</ul>
<p class="in">Ruby, Rython, Perl, PHPなどのスクリプト言語処理系はたいていフリーソフトウェアですから、無料で入手できます。また、移植性も高いのでLinuxでもWindowsでも、その他多くのOSでもほぼ同じように利用できます。これらを使えばBASICが主流だった昔のように自由にプログラミングができるようになります。</p>
<p class="in">コンピュータをプログラムする喜びを再び私たちの手に。そしてコンピュータを万能機械として活用しようではありませんか。</p>
</section>
<section id="chap3006" class="level2">
<h3>予告</h3>
<hr class="hr-gray" />
<p class="ih">「プログラムできる喜び」について宣伝したところで、この連載はとうとう終わりです。今まで長い間本当にありがとうございました。この連載が皆さんがRubyを理解する助けに少しでもなったのであれば幸いです。</p>
<p class="ih">『Ruby初等講座』はこれで終わりますが、もうちょっと目先を変えた形での連載を始めたいなと思っています。今までは入門でしたが、今度はもうちょっと応用寄りになると思います。お楽しみに。</p>
</section>
</section>
<!-- Navigation -->
<br /><br />
<hr />
<p class="navigation-right"><a href="p-064.xhtml">&lt;&lt; 前ページ</a>　<a href="p-066.xhtml">次ページ &gt;&gt;</a></p>
</body>
</html>
